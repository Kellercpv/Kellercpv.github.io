<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-11T13:55:46.422Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kellercpv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2023/12/17/MySQL/"/>
    <id>http://example.com/2023/12/17/MySQL/</id>
    <published>2023-12-16T16:00:00.000Z</published>
    <updated>2024-10-11T13:55:46.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="MyISAM-和-InnoDB-有什么区别？"><a href="#MyISAM-和-InnoDB-有什么区别？" class="headerlink" title="MyISAM 和 InnoDB 有什么区别？"></a>MyISAM 和 InnoDB 有什么区别？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MySQL5<span class="number">.5</span>之前默认引擎是MyISAM，现在是InnoDB。</span><br><span class="line">区别：</span><br><span class="line"><span class="number">1</span>、InnoDB支持行锁表锁，MyISAM只支持表锁</span><br><span class="line"><span class="number">2</span>、MyISAM不支持事务，InnoDB支持事务，并实现了SQL标准定义四个隔离级别</span><br><span class="line"><span class="number">3</span>、MyISAM不支持外键，InnoDB支持外键</span><br><span class="line"><span class="number">4</span>、MyISAM不支持MVCC，InnoDB支持MVCC</span><br><span class="line"><span class="number">5</span>、虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。</span><br><span class="line"><span class="number">6</span>、MyISAM 不支持数据库异常崩溃后的安全恢复，而 InnoDB 支持。</span><br><span class="line"><span class="number">7</span>、InnoDB 的性能比 MyISAM 更强大    </span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">索引是一种用于快速查询和检索数据的数据结构，其本质可以看成是一种排序好的数据结构。</span><br><span class="line">索引底层数据结构存在很多种类型，常见的索引结构有：B树，B+树和Hash、红黑树。在MySQL中，无论是InnoDB还是MyISAM，都使用B+树作为索引结构。    </span><br><span class="line">优点：</span><br><span class="line"><span class="number">1</span>、使用索引可以大大加快数据的检索速度（大大减少检索的数据量）</span><br><span class="line"><span class="number">2</span>、创建唯一索引，可以保证数据库表中每一行数据的唯一性。</span><br><span class="line">缺点：</span><br><span class="line"><span class="number">1</span>、创建索引和维护索引需要耗费许多时间，当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低SQl执行效率。</span><br><span class="line"><span class="number">2</span>、索引需要使用物理文件存储，也会耗费一定空间。   </span><br></pre></td></tr></table></figure><h3 id="索引底层数据结构选型"><a href="#索引底层数据结构选型" class="headerlink" title="索引底层数据结构选型"></a>索引底层数据结构选型</h3><h4 id="Hash表（Hash索引不支持顺序和范围查询）"><a href="#Hash表（Hash索引不支持顺序和范围查询）" class="headerlink" title="Hash表（Hash索引不支持顺序和范围查询）"></a>Hash表（Hash索引不支持顺序和范围查询）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">哈希表可以通过hash算法，快速找到key对应index，即可快速取出对应的值。因此哈希表可以快速检索数据。</span><br><span class="line">哈希表这么快，为什么MySQL没有使用其作为索引的数据结构呢？</span><br><span class="line">主要是因为Hash索引不支持顺序和范围查询。假如我们要对表中的数据进行排序或者进行范围查询，那Hash索引可就不行了。并且每次IO只能取一个。</span><br><span class="line">SELECT * FROM tb1 WHERE id &lt; <span class="number">500</span>;</span><br><span class="line">在这种范围查询中，Hash索引需要把<span class="number">1</span>-<span class="number">499</span>的数据都进行一次hash计算定位数据。    </span><br></pre></td></tr></table></figure><h4 id="二叉查找树（二叉查找树的性能非常依赖于他的平衡程度，所以不适合作为MySQL索引底层数据结构-）"><a href="#二叉查找树（二叉查找树的性能非常依赖于他的平衡程度，所以不适合作为MySQL索引底层数据结构-）" class="headerlink" title="二叉查找树（二叉查找树的性能非常依赖于他的平衡程度，所以不适合作为MySQL索引底层数据结构   ）"></a>二叉查找树（二叉查找树的性能非常依赖于他的平衡程度，所以不适合作为MySQL索引底层数据结构   ）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">二叉查找树具有以下特点：</span><br><span class="line">左子树所有节点的值均小于根节点的值。</span><br><span class="line">右子树所有节点的值均大于根节点的值。</span><br><span class="line">左右子树也分别为二叉查找树。</span><br><span class="line">当二叉查找树是平衡的时候，查询的时间复杂度为O（log2（N）），具有较高的效率。当二叉树不平衡时，最坏情况下，时间复杂度退化为O（N）。二叉查找树的性能非常依赖于他的平衡程度，所以不适合作为MySQL索引底层数据结构   </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YTY0OWViZTlmZmU5Mzc5MDQxODg3MmY4YzNmMDM1NWFfRFk3MlFBZ0U5SkJXQUFxbWFlZWd6MlNCSmdISXgyQkhfVG9rZW46WFY2cmJFWDZMb3BwejF4bW9zSmM4QXM1bjZjXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="AVL树（AVL树需要频繁的进行旋转操作来保持平衡）"><a href="#AVL树（AVL树需要频繁的进行旋转操作来保持平衡）" class="headerlink" title="AVL树（AVL树需要频繁的进行旋转操作来保持平衡）"></a>AVL树（AVL树需要频繁的进行旋转操作来保持平衡）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AVL树是一种自平衡二叉查找树，AVL树的特点是保证任何结点的左右子树高度之差不超过<span class="number">1</span>，查找，插入，删除平均情况和最坏情况下的时间复杂度都是O（logn）</span><br><span class="line">缺点：</span><br><span class="line"><span class="number">1</span>、由于AVL树需要频繁的进行旋转操作来保持平衡，因此会有较大的计算开销降低了查询性能。</span><br><span class="line"><span class="number">2</span>、每个节点存储一个数据，每次磁盘IO时只能读取一个节点的数据，当需要查询的数据分布在多个节点上，那么就需要进行多次磁盘IO。</span><br><span class="line"></span><br><span class="line">磁盘 IO 是一项耗时的操作，在设计数据库索引时，我们需要优先考虑如何最大限度地减少磁盘 IO 操作的次数。    </span><br></pre></td></tr></table></figure><h4 id="红黑树（树高，影响IO效率）"><a href="#红黑树（树高，影响IO效率）" class="headerlink" title="红黑树（树高，影响IO效率）"></a>红黑树（树高，影响IO效率）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">红黑树是一种自平衡二叉查找树，通过在插入和删除节点时进行颜色变换和旋转操作，使得树始终保持平衡状态，特点：</span><br><span class="line"><span class="number">1</span>、每个节点非红即黑；</span><br><span class="line"><span class="number">2</span>、根节点总是黑色的；</span><br><span class="line"><span class="number">3</span>、每个叶子节点都是黑色的空节点（NIL 节点）；</span><br><span class="line"><span class="number">4</span>、如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；</span><br><span class="line"><span class="number">5</span>、从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。 </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MGVkZTg3YmY3YjFjZGUwMWE3OTA3ZDlkYjIzYWFlYjJfNENoRUh2OFBLTWtxWlRLVjJzWFNibWI1bHIycm96MzBfVG9rZW46WENwTGJ6dFV0b2hLUzV4dGhYUGNybEpkbkllXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">和AVL树不同，红黑树并不追求严格的平衡，而是大致的平衡。</span><br><span class="line">优点：</span><br><span class="line">红黑树插入和删除操作效率大大提高，红黑树在插入和删除节点只需要进行O（<span class="number">1</span>）次旋转和变色操作，即可保持平衡，而AVL树需要O（logn）次旋转操作。</span><br><span class="line">缺点：</span><br><span class="line">红黑树查询效率稍有下降，因为红黑树平衡性较弱。</span><br><span class="line">因为红黑树的平衡性相对较弱，可能会导致树的高度较高，一些数据需要进行多次磁盘IO操作才能查询到，这也是MySQL没有选择红黑树的主要原因。</span><br><span class="line">红黑树的应用还是比较广泛的，TreeMap、TreeSet 以及 JDK1<span class="number">.8</span> 的 HashMap 底层都用到了红黑树。对于数据在内存中的这种情况来说，红黑树的表现是非常优异的。    </span><br></pre></td></tr></table></figure><h4 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B 树也称B-树,全称为多路平衡查找树，B+树是B树的一种变体。</span><br></pre></td></tr></table></figure><h5 id="B树和B-树区别"><a href="#B树和B-树区别" class="headerlink" title="B树和B+树区别"></a>B树和B+树区别</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、B 树的所有节点既存放键(key) 也存放数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</span><br><span class="line"><span class="number">2</span>、B 树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</span><br><span class="line"><span class="number">3</span>、B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</span><br><span class="line"><span class="number">4</span>、在 B 树中进行范围查询时，首先找到要查找的下限，然后对 B 树进行中序遍历，直到找到查找的上限；而 B+树的范围查询，只需要对链表进行遍历即可。</span><br><span class="line">综上，B+树与 B 树相比，具备更少的 IO 次数、更稳定的查询效率和更适于范围查询这些优势。</span><br></pre></td></tr></table></figure><h4 id="为什么选择B-树而不是B树"><a href="#为什么选择B-树而不是B树" class="headerlink" title="为什么选择B+树而不是B树"></a>为什么选择B+树而不是B树</h4><p>1、B+树叶子节点使用双向链表相互连接，有更好的顺序查询和范围查询性能</p><p>2、B+树非叶子结点只存索引不存数据，所以非叶子结点能存更多索引，所以B+树的高度更低。B+树磁盘IO次数更少，查询性能更稳定。</p><h4 id="为什么树高会影响IO次数"><a href="#为什么树高会影响IO次数" class="headerlink" title="为什么树高会影响IO次数"></a>为什么树高会影响IO次数</h4><p>MySQL数据是根据索引组织，索引底层一般是B+树。数据库中的每一行数据其实是索引树的节点（红黑树，B树结点存数据，B+树只在叶子节点存数据），所以在查询数据时需要从树的根节点访问到树的叶子节点。</p><p>在磁盘上存储数据时，通常会将数据组织成树形结构（比如红黑树、B树、B+树等），以便有效地进行检索和修改。当进行数据操作时，需要沿着树的路径从根节点向下遍历到达目标节点。每次从磁盘读取一个节点的数据都需要一次磁盘IO操作。因此，树的高度直接影响了从根节点到达叶子节点所需的磁盘IO次数。</p><h4 id="非聚簇索引和聚簇索引"><a href="#非聚簇索引和聚簇索引" class="headerlink" title="非聚簇索引和聚簇索引"></a>非聚簇索引和聚簇索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyISAM引擎中，B+Tree 叶节点的 data 域存放的是数据记录的地址。在索引检索的时候，首先按照 B+Tree 搜索算法搜索索引，如果指定的 Key 存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“非聚簇索引（非聚集索引）</span><br><span class="line">    </span><br><span class="line">InnoDB 引擎中，树的叶节点 data 域保存了完整的数据记录。这个索引的 key 是数据表的主键，因此 InnoDB 表数据文件本身就是主索引。这被称为“聚簇索引（聚集索引），而其余的索引都作为 辅助索引 ，辅助索引的 data 域存储相应记录主键的值而不是地址，这也是和 MyISAM 不同的地方。</span><br><span class="line">在根据主索引搜索时，直接找到 key 所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，再走一遍主索引。   </span><br></pre></td></tr></table></figure><h3 id="索引类型总结"><a href="#索引类型总结" class="headerlink" title="索引类型总结"></a>索引类型总结</h3><h4 id="数据结构划分"><a href="#数据结构划分" class="headerlink" title="数据结构划分"></a>数据结构划分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BTree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</span><br><span class="line">哈希索引：类似键值对的形式，一次即可定位。</span><br><span class="line">RTree 索引：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</span><br><span class="line">全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</span><br></pre></td></tr></table></figure><h4 id="底层存储方式划分"><a href="#底层存储方式划分" class="headerlink" title="底层存储方式划分"></a>底层存储方式划分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB中的主键索引就属于聚簇索引。</span><br><span class="line">非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引（辅助索引）就属于非聚簇索引。MyISAM引擎不管主键还是非主键，使用的都是非聚簇索引。    </span><br></pre></td></tr></table></figure><h4 id="应用维度划分"><a href="#应用维度划分" class="headerlink" title="应用维度划分"></a>应用维度划分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主键索引：加速查询+列表唯一（不可以有NULL）+表中只有一个。</span><br><span class="line">普通索引：加速查询</span><br><span class="line">唯一索引：加速查询+列表唯一（可以有NULL）</span><br><span class="line">覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</span><br><span class="line">联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</span><br><span class="line">全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</span><br></pre></td></tr></table></figure><h4 id="唯一索引失效情况"><a href="#唯一索引失效情况" class="headerlink" title="唯一索引失效情况"></a>唯一索引失效情况</h4><p>1、唯一索引字段包含null（null代表不确定的值，所以失效）</p><p>2、逻辑删除表加唯一索引</p><p><a href="https://zhuanlan.zhihu.com/p/549975889">唯一索引失效及解决方案</a></p><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据表的主键使用的就是主键索引。</span><br><span class="line">一张数据表只能有一个主键，并且主键不能为NULL，不能重复。   </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ODQ1NzdlNTM0OGQ1NGU2MmYxMTA0YjI1NjUxMzBhMWNfZXhINVduTjFFUDZ4QXF5RWdFV2E3em9qbDZFekU5RDdfVG9rZW46WUVUZ2I3MXIxbzB1T2d4WmtyTGNwRW05bk1jXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h3 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说通过二级主键，可以也只能定位主键位置。</span><br><span class="line">唯一索引，普通索引，前缀索引等索引属于二级索引。</span><br><span class="line">唯一索引（Unique Key）:建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。</span><br><span class="line">普通索引（Index）:</span><br><span class="line">前缀索引(Prefix):前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。</span><br><span class="line">全文索引（Full Text）: </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NDk3MDVlNDdiMTgwZWY3Yjc5M2Q0ZDNjOTk3NjE5OGZfSjRYZnBRS3JHUDh4bEtLUDNxdE5ZTHEzdDVTNzgzQ2ZfVG9rZW46RGRITGJGREhsbzJoWUZ4aVhLTWNyZmI5bjFjXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h3 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h3><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">聚簇索引即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB中的主键索引就属于聚簇索引。</span><br></pre></td></tr></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="number">1</span>、查询速度非常快：聚簇索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。相比于非聚簇索引， 聚簇索引少了一次读取数据的 IO 操作。</span><br><span class="line"><span class="number">2</span>、对排序查找和范围查找优化：聚簇索引对于主键的排序查找和范围查找速度非常快。</span><br><span class="line">缺点：</span><br><span class="line"><span class="number">1</span>、依赖于有序的数据：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。</span><br><span class="line"><span class="number">2</span>、更新代价大：如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且聚簇索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。</span><br></pre></td></tr></table></figure><h4 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">非聚簇索引即索引结构和数据分开存放的素银，并不是一种单独的索引类型。二级索引（辅助索引）就属于非聚簇索引。MyISAM引擎，不管主键还是非主键，使用的都是非聚簇索引。</span><br><span class="line">非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据    </span><br></pre></td></tr></table></figure><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="number">1</span>、更新代价比聚簇索引要小。非聚簇索引的叶子节点是不存放数据的。</span><br><span class="line">缺点：</span><br><span class="line"><span class="number">1</span>、依赖于有序的数据</span><br><span class="line"><span class="number">2</span>、可能会二次查询（回表）：当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询    </span><br></pre></td></tr></table></figure><h4 id="非聚簇索引一定回表查询吗"><a href="#非聚簇索引一定回表查询吗" class="headerlink" title="非聚簇索引一定回表查询吗"></a>非聚簇索引一定回表查询吗</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">非聚簇索引不一定回表查询。</span><br><span class="line">假设用户名有索引，当查询语句只需要查询用户名时，查到对应name就直接返回，无需回表查询    </span><br></pre></td></tr></table></figure><h3 id="覆盖索引和联合索引"><a href="#覆盖索引和联合索引" class="headerlink" title="覆盖索引和联合索引"></a>覆盖索引和联合索引</h3><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果一个索引包含所有需要查询的字段的值，我们就称之为 覆盖索引（Covering Index） 。我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次，这样就会比较慢。而覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！</span><br><span class="line">    </span><br><span class="line">所以覆盖索引指的是一种情况,即索引的字段刚好能满足查询需求，不需要回表即可满足查询的情况。</span><br><span class="line">覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</span><br><span class="line">比如刚刚的非聚簇索引不一定回表查询的情况，就是覆盖索引。    </span><br></pre></td></tr></table></figure><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用多个字段创建索引就是联合索引。</span><br></pre></td></tr></table></figure><h4 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最左前缀匹配原则指的是，在使用联合索引时，MySQL 会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询（如 &gt;、&lt; ）才会停止匹配。对于 &gt;=、&lt;=、BETWEEN、like 前缀匹配的范围查询，并不会停止匹配。所以，我们在使用联合索引时，可以将区分度高的字段放在最左边，这也可以过滤更多数据。</span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/8qemhRg5MgXs1So5YCv0fQ">全网都在说一个错误的结论 (qq.com)</a></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、最左匹配原则有点不了解。</span><br></pre></td></tr></table></figure><h3 id="联合索引失效"><a href="#联合索引失效" class="headerlink" title="联合索引失效"></a>联合索引失效</h3><p>比如，如果创建了一个 (a, b, c) 联合索引，如果查询条件是以下这几种，就可以利用联合索引：</p><ul><li>where a&#x3D;1；</li><li>where a&#x3D;1 and b&#x3D;2 and c&#x3D;3；</li><li>where a&#x3D;1 and b&#x3D;2；</li></ul><p>需要注意的是，因为有查询优化器，所以 a 字段在 where 子句的顺序并不重要。但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><ul><li>where b&#x3D;2；</li><li>where c&#x3D;3；</li><li>where b&#x3D;2 and c&#x3D;3；</li></ul><p>上面这些查询条件之所以会失效，是因为(a, b, c) 联合索引，是先按 a 排序，在 a 相同的情况再按 b 排序，在 b 相同的情况再按 c 排序。所以，<strong>b 和 c 是全局无序，局部相对有序的</strong>，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">索引下推（Index Condition Pushdown） 是 MySQL <span class="number">5.6</span> 版本中提供的一项索引优化功能。</span><br><span class="line">它允许存储引擎在索引遍历过程中，执行部分 WHERE字句的判断条件，直接过滤掉不满足条件的记录，从而减少回表次数，提高查询效率。</span><br><span class="line"></span><br><span class="line">假设我们有一个名为 user 的表，其中包含 id, username, zipcode和 birthdate <span class="number">4</span> 个字段，创建了联合索引(zipcode, birthdate)。</span><br><span class="line">SELECT * FROM user <span class="type">WHERE</span> <span class="variable">zipcode</span> <span class="operator">=</span> <span class="string">&#x27;431200&#x27;</span> AND <span class="title function_">MONTH</span><span class="params">(birthdate)</span> = <span class="number">3</span>;（使用函数）</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=OTFkYTg1MjkwZTc5NTQyZGMzNGIxNDNiMWMzNTQxYzRfZWxLRDNrTHI2MzE5d2xPQ1QzcUNzcllGbDNWdkxLVm9fVG9rZW46RkJHWWJCQ3BEb0tPTXd4STVWY2NIYmg4bmdkXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h3 id="正确使用索引的一些建议"><a href="#正确使用索引的一些建议" class="headerlink" title="正确使用索引的一些建议"></a>正确使用索引的一些建议</h3><h3 id="查询什么情况会走索引"><a href="#查询什么情况会走索引" class="headerlink" title="查询什么情况会走索引"></a>查询什么情况会走索引</h3><p>1、等值查询（&#x3D;）： 当使用等值查询时，如果查询条件与索引列完全匹配，MySQL通常会选择使用索引来执行查询。</p><p>2、范围查询（BETWEEN、IN、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;）： 当查询条件中涉及到范围时，如果索引列的范围与查询条件的范围有重叠，MySQL也会尝试使用索引来加速查询。</p><p>3、LIKE查询（仅适用于以通配符开始的情况）： 当使用LIKE查询时，如果通配符仅出现在字符串的末尾（例如’prefix%’），MySQL可能会使用索引。</p><p>4、顺序查询（ORDER BY）： 当查询结果需要按照索引列排序时，MySQL可能会选择使用索引来避免额外的排序操作。</p><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><p>1、函数操作，当在查询条件中使用函数操作时，索引可能会失效。例如，<code>WHERE YEAR(date_column) = 2022</code>。在这种情况下，数据库不会使用索引，因为它无法对<code>date_column</code>进行索引匹配。</p><p>2、隐式类型转换： 当查询条件中的字段类型与索引列的类型不匹配时，数据库可能会进行隐式类型转换。在这种情况下，索引可能会失效。例如，如果字段是字符串类型而索引列是整数类型，那么即使它们的值相同，索引也可能会失效。</p><p>3、使用通配符在查询开头： 当使用通配符（例如<code>%value</code>）在查询条件的开头时，索引通常会失效。例如，<code>WHERE column LIKE &#39;%value&#39;</code>。</p><p>4、范围查询中的边界问题： 在范围查询中，如果查询条件包含不可使用的边界值，索引可能会失效。例如，<code>WHERE column BETWEEN &#39;a&#39; AND &#39;z&#39;</code>，如果<code>&#39;a&#39;</code>和<code>&#39;z&#39;</code>不是索引的完整值，索引可能会失效。</p><h3 id="锁加在索引上如何理解"><a href="#锁加在索引上如何理解" class="headerlink" title="锁加在索引上如何理解"></a>锁加在索引上如何理解</h3><p>数据是由索引组织起来的，对数据加锁其实就是对索引加锁</p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL日志主要包裹错误日志，查询日志，慢查询日志，事务日志，二进制日志几大类。其中比较重要的是二进制日志binlog（归档日志）和事务日志redolog（重做日志）和回滚日志undolog</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MTkzNmMzOTBlOTVlMjhkY2NmY2QyYjM3OWI0MjIyMTVfNVY4M1l0UzFqcHNiSzlMQmxXNkh2MXJZWXh3Q0lSWGpfVG9rZW46TTBIbmIxT2pab09YckJ4SFpHb2NkQ3RPbkhlXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redo log（重做日志，事务日志）是InnoDB存储引擎特有的，它让MySQL拥有了崩溃恢复能力。</span><br><span class="line">当MySQL宕机了，重启时InnoDB存储引擎会使用redo log恢复数据，，保证数据的持久性与完整性。    </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NzFmYzlhNTIzMGZiOWZkNzViOGI4ZWEwZjM1MWIwYjJfTzVtWE43cHpFOHlteDhsbHN2clM4Nkd0VkVqYlJRVERfVG9rZW46QjF4QWIzeUtWb3FpMVp4a0cyZWM0N0txbnRjXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL中数据是以页为单位，你查询一条记录，会从硬盘把一页的数据加载出来，加载出来的数据叫数据页，会放入到 Buffer Pool 中。</span><br><span class="line">后续的查询都是先从 Buffer Pool中找，没有命中再去硬盘加载，减少硬盘 IO 开销，提升性能。</span><br><span class="line">更新表数据的时候，也是如此，发现 Buffer Pool 里存在要更新的数据，就直接在 Buffer Pool 里更新。然后会把“在某个数据页上做了什么修改”记录到重做日志缓存（redo log buffer）里，接着刷盘到 redo log 文件里。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=N2VhOWE5NGYxM2JmZjc5ZTliMTJkMGRmYmIyNmVmZWNfa1RmYUZjMkZnVDFJRW9PRHdLZEFVNDY0eW8zRGk0alhfVG9rZW46QWxmVmI0NTJsb1VHbG54QlRJU2MxRlZybmRkXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">具体刷盘时机根据策略进行。</span><br><span class="line">每条redo记录由“表空间号+数据页号+偏移量+修改数据长度+具体修改的数据”组成    </span><br></pre></td></tr></table></figure><h4 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InnoDB将redo log刷到磁盘上有几种情况：</span><br><span class="line"><span class="number">1</span>、事务提交：当事务提交时，log buffer里的redo log会被刷新到磁盘。</span><br><span class="line"><span class="number">2</span>、log buffer空间不足时：log buffer中缓存的redo log已经占满了log buffer总容量大约一半左右，就需要把这些日志刷新到磁盘上。</span><br><span class="line"><span class="number">3</span>、事务日志缓冲区满时：InnoDB 使用一个事务日志缓冲区（transaction log buffer）来暂时存储事务的重做日志条目。当缓冲区满时，会触发日志的刷新，将日志写入磁盘。</span><br><span class="line"><span class="number">4</span>、Checkpoint（检查点）：InnoDB 定期会执行检查点操作，将内存中的脏数据（已修改但尚未写入磁盘的数据）刷新到磁盘，并且会将相应的重做日志一同刷新，以确保数据的一致性。</span><br><span class="line"><span class="number">5</span>、后台刷新线程：InnoDB 启动了一个后台线程，负责周期性（每隔 <span class="number">1</span> 秒）地将脏页（已修改但尚未写入磁盘的数据页）刷新到磁盘，并将相关的重做日志一同刷新。</span><br><span class="line"><span class="number">6</span>、正常关闭服务器：MySQL 关闭的时候，redo log 都会刷入到磁盘里去。  </span><br><span class="line">可以通过设置innodb_flush_log_at_trx_commit选择刷盘策略。</span><br><span class="line">innodb_flush_log_at_trx_commit的值有<span class="number">3</span>种，也就是有三种刷盘策略：</span><br><span class="line"><span class="number">0</span>：设置为<span class="number">0</span>的时候，表示每次事务提交时不进行刷盘操作。这种方式性能最高，但是也最不安全，因为如果MySQL挂了或者宕机了，可能会丢失最近<span class="number">1</span>秒内的事务。</span><br><span class="line"><span class="number">1</span>：设置为 <span class="number">1</span> 的时候，表示每次事务提交时都将进行刷盘操作。这种方式性能最低，但是也最安全，因为只要事务提交成功，redo log 记录就一定在磁盘里，不会有任何数据丢失。</span><br><span class="line"><span class="number">2</span>：设置为 <span class="number">2</span> 的时候，表示每次事务提交时都只把 log buffer 里的 redo log 内容写入 page cache（文件系统缓存）。page cache 是专门用来缓存文件的，这里被缓存的文件就是 redo log 文件。这种方式的性能和安全性都介于前两者中间。 </span><br><span class="line">为了保证事务的持久性，必须设置为<span class="number">1</span>。</span><br></pre></td></tr></table></figure><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redo log是事务日志，那么如果我没开启事务，修改的操作会被记录到redo log吗</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h4 id="日志文件组"><a href="#日志文件组" class="headerlink" title="日志文件组"></a>日志文件组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">硬盘上存储的redo log日志文件是以日志文件组的形式出现，每个redo log日志文件大小都是一样的。</span><br><span class="line">比如可以配置一组<span class="number">4</span>个文件。</span><br><span class="line">它采用的是环形数组形式，从头开始写，写到末尾又回到头循环写，如下图所示。    </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MDVjOTBjYzc4ZTQ0ZmZiNjdjMGZjZGI2MGI2Zjk5YzlfV0Rya0tFRjlEbnFoWHMxSlFUQ2J1OFVSbkJGZkVwdnBfVG9rZW46QTBTcmJjU1R3b01MOUd4RUFUMGNCd25JblFoXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在个日志文件组中还有两个重要的属性，分别是 write pos、checkpoint</span><br><span class="line">write pos 是当前记录的位置，一边写一边后移</span><br><span class="line">checkpoint 是当前要擦除的位置，也是往后推移</span><br><span class="line">    </span><br><span class="line">每次刷盘 redo log 记录到日志文件组中，write pos 位置就会后移更新。</span><br><span class="line">每次 MySQL 加载日志文件组恢复数据时，会清空加载过的redo log记录，并把 checkpoint 后移更新。write pos 和 checkpoint 之间的还空着的部分可以用来写入新的 redo log 记录。 </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YTAxMThjYWFiNDM3YTkxMGI0NGIxODcwZmNiOTIzMDlfT0RYck43NkVyOUladE5iWEoxbUsxM2szaVltYTZoQnNfVG9rZW46SXZMeWJidlQ2b0gxWTh4aDRpcWNJY3ltbmpnXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果 write pos 追上checkpoint ，表示日志文件组满了，这时候不能再写入新的 redo log 记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MzM4MjhmZDA2NzAxMTdjYjQ5ZjM4OWE4MmQ0M2QyM2VfY1RSVmdmZ0lxNm9rNUc5Y3Blb1ZuUkNDdG95WEkzakVfVG9rZW46Rkx3cGJpZFRtbzlMZ2l4SHJoY2NwTWF2bm9lXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="redo-log小结"><a href="#redo-log小结" class="headerlink" title="redo log小结"></a>redo log小结</h4><h3 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redo log是物理日志，记录内容是“在某个数据页做了什么修改”，属于InnoDB存储引擎。</span><br><span class="line">而binlog是逻辑日志，记录内容是语句的原始逻辑，类似于“给ID=<span class="number">2</span>这一行c字段加<span class="number">1</span>”，属于MySQL Server层</span><br><span class="line">不管什么存储引擎，只要产生表数据更新，都会产生binlog日志。    </span><br></pre></td></tr></table></figure><h4 id="binlog到底是用来干嘛的？"><a href="#binlog到底是用来干嘛的？" class="headerlink" title="binlog到底是用来干嘛的？"></a>binlog到底是用来干嘛的？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MjViMTI3OWNjYTk2ZGFhMjE4MzJjMjFhNzA3MjUxNmZfR0FETm91eVpuZHlReHpnUzFaWFZHcDlxZ2hnYnlXbzhfVG9rZW46VW95SmJyNUhjb0pZNVN4cEJZS2NHV0ZDbkRiXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="记录格式"><a href="#记录格式" class="headerlink" title="记录格式"></a>记录格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">binlog日志有三种格式，可以通过binlog_format参数指定。</span><br><span class="line">statement</span><br><span class="line">row</span><br><span class="line">mixed    </span><br></pre></td></tr></table></figure><h5 id="statement"><a href="#statement" class="headerlink" title="statement"></a>statement</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指定statement格式，记录的内容是SQL语句原文，比如执行一条update T set update_time=now() where id=<span class="number">1</span>，记录的内容如下。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjYwZDc4NDAxYTI1ZTNkM2Q0M2I4ODY5YzI4NDVkZTdfc0hrazdBaGpYUGcydkJRZlZYa0ptZVVpWWRIMTM4aVZfVG9rZW46TlBmMmJEUEU2b0VQb1R4MVFSaGNDQm16blBoXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是有个问题，当同步数据时，update_time=now()会获取当前系统时间，会导致数据不一致。为了解决这个问题，需要指定row格式。</span><br></pre></td></tr></table></figure><h5 id="row"><a href="#row" class="headerlink" title="row"></a>row</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row格式记录的内容不再是简单的SQL语句了，还包含操作的具体数据，记录内容如下。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2JmYWM5ZDI2MjI4NTM1MDExZWExMjQxMzQwMWE0OGJfbXd3d0dVWGJBTkx6b0JQVWNBYnAzWFFEYzNJSWZSUkVfVG9rZW46RE8wcWJlcHhSb010Wm54SnhhNmN2TXN1bkhjXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">row格式记录的内容看不到详细信息，要通过mysqlbinlog工具解析出来。</span><br><span class="line">update_time=now()变成了具体的时间update_time=<span class="number">1627112756247</span>，条件后面的@<span class="number">1</span>、@<span class="number">2</span>、@<span class="number">3</span> 都是该行数据第 <span class="number">1</span> 个~<span class="number">3</span> 个字段的原始值（假设这张表只有 <span class="number">3</span> 个字段）。</span><br><span class="line">这样就能保证同步数据的一致性。</span><br><span class="line">但是这种格式需要更大的容量来记录，比较占用空间，恢复与同步时会更消耗IO资源，影响执行速度。</span><br><span class="line">所以有一种折中方式，mixed，记录内容是前两者混合。    </span><br></pre></td></tr></table></figure><h5 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL会判断这条SQL语句是否可能引起数据不一致，如果是，就用row格式，否则就用statement格式。</span><br></pre></td></tr></table></figure><h4 id="写入机制"><a href="#写入机制" class="headerlink" title="写入机制"></a>写入机制</h4><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redo log（重做日志）让InnoDB存储引擎拥有了崩溃恢复能力。</span><br><span class="line">binlog（归档日志）保证了MySQL集群架构的数据一致性。</span><br><span class="line">虽然它们都属于持久化的保证，但是侧重点不同。</span><br><span class="line">在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的写入时机不一样。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NDg1Y2Y1YWM1NmViZWY4NjFmNTBiOGM5MTY3Zjk0ODBfaXh4cVJ2bTl5cnRJWk92ZTJvMHhWZXpmUVlMenEyR25fVG9rZW46TXdYNmJtMzBjbzFJYlV4S1g3eWNmYVhVblFlXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们以update语句为例，假设id=<span class="number">2</span>的记录，字段c值是<span class="number">0</span>，把字段c值更新成<span class="number">1</span>，</span><br><span class="line">SQL语句为update T set c=<span class="number">1</span> where id=<span class="number">2</span>。</span><br><span class="line">假设执行过程中写完redo log日志后，binlog日志写期间发生了异常，会出现什么情况呢？</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MmFlNmUwNGFjNDdiOWUxYzY5MTNjZTFlMmFjYTZmYThfQkpBeG9NMkVIYnl0dkE2WE1QWDZZV1BMYlNLYXZuTEZfVG9rZW46TkdCQ2J5dG9RbzlweG54QWg4Y2NWbkxZbmVlXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于binlog没写完就异常，这时候binlog里面没有对应的修改记录。因此，之后用binlog日志恢复数据时，就会少这一次更新，恢复出来的这一行c值是<span class="number">0</span>，而原库因为redo log日志恢复，这一行c值是<span class="number">1</span>，最终数据不一致。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YjJmODAwMmNjMTE4OGIzZDExMjRjY2Y4YzAyMTU3NjZfbjFKM0YwSTlwYkNveFNKQmFHbUVremZJMDFxZUljRXRfVG9rZW46U2lyOWJBbWVTb1BIZTZ4VXNJTWNidVJvbnJjXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用两阶段提交方案。</span><br><span class="line">原理很简单，将redo log的写入拆成了两个步骤prepare和commit，这就是两阶段提交。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTE3ZDlhNGQ2MmNiZjQ0ZDhmNmMxZDQ2NWFhOTI5MDBfczRONEFUaTdzMExZUGdIeGlMOE9jRG1kMW9QbXd1Mm1fVG9rZW46SUZKTWJtY1Ztb0toV3p4TElBQmN4MDNabjNmXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用两阶段提交后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redo log还处于prepare阶段，并且没有对应binlog日志，就会回滚该事务。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=OGM4ZjZkMTgwNTk5NGNiNjdlZDQwYWQ0ZjQwMDJmNzVfVW13RnNLMEc4UHJkS1dFY3ZGdkN6RnFKREh6Q3JjY0hfVG9rZW46WllCbWJvTlZpb21ZSEF4ejNGYWNybllIbktiXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再看一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</span><br><span class="line">并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NGNkMzMzMjRmYTY2YTBkZDNiMmNmNGIzMWM2ZGFiNWFfZzZIWGVtOTdaTHhXM25KbnpoZllxd0JlcXJ5V0FjV0NfVG9rZW46RHU3OWJzZ3FKb0VPc2t4ckREbmNDZzRIbkxnXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h3 id="Undo-log"><a href="#Undo-log" class="headerlink" title="Undo log"></a>Undo log</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">undo log主要有两个作用：</span><br><span class="line">当事务回滚时用于将数据恢复到修改前的样子</span><br><span class="line">另一个作用是MVCC，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过undo log读取之前的版本数据，以此实现非锁定读</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事务是逻辑上要一组操作要么全部执行，要么全部不执行    </span><br></pre></td></tr></table></figure><h3 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ACID:</span><br><span class="line">原子性：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</span><br><span class="line">一致性：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的 </span><br><span class="line">隔离性：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</span><br><span class="line">持久性：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响 </span><br><span class="line">这里要额外补充一点：只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！    </span><br></pre></td></tr></table></figure><h3 id="并发事务带来什么问题"><a href="#并发事务带来什么问题" class="headerlink" title="并发事务带来什么问题"></a>并发事务带来什么问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交。这时另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，那第二个事务读取到的就是脏数据，这也就是脏读的由来。</span><br><span class="line">例如：事务 <span class="number">1</span> 读取某表中的数据 A=<span class="number">20</span>，事务 <span class="number">1</span> 修改 A=A-<span class="number">1</span>，事务 <span class="number">2</span> 读取到 A = <span class="number">19</span>,事务 <span class="number">1</span> 回滚导致对 A 的修改并未提交到数据库， A 的值还是 <span class="number">20</span>。    </span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YWRhMzUwNWY3Y2NlZWU4MDFmMTE2MGZlYjhhZDU4NDBfc3p4amc5ZEZJOXFjRElsVFR3S1pRYVdlbHJzOU16a0tfVG9rZW46Q1dzdWI5d0JMb05iMDV4NjVRQmNDNm5rbkdlXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="丢失修改"><a href="#丢失修改" class="headerlink" title="丢失修改"></a>丢失修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。例如：事务 <span class="number">1</span> 读取某表中的数据A=<span class="number">20</span>，事务 <span class="number">2</span> 也读取 A=<span class="number">20</span>，事务 <span class="number">1</span> 先修改 A=A-<span class="number">1</span>，事务 <span class="number">2</span> 后来也修改 A=A-<span class="number">1</span>，最终结果 A=<span class="number">19</span>，事务 <span class="number">1</span> 的修改被丢失。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YTkxZjIzMzVjNjhiMWJhYjE2MGY0YWM2ZjBjZjhmOTJfTUMzb2o2cFdvSWx1M1JIZVpDcnllajhXRE9YOUVUOG9fVG9rZW46R1c3TmJuSVFvb0RQTE14TVBPQmNvTm50bjVkXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。例如：事务 <span class="number">1</span> 读取某表中的数据 A=<span class="number">20</span>，事务 <span class="number">2</span> 也读取 A=<span class="number">20</span>，事务 <span class="number">1</span> 修改 A=A-<span class="number">1</span>，事务 <span class="number">2</span> 再次读取 A =<span class="number">19</span>，此时读取的结果和第一次读取的结果不同。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=Mjg5MTZkNGUwMjY1NzVkYWUyYmE0MGZiZjg0OWU4YjNfVHB4VWtNZ2s5WGJ2OFp4R1o1elpKVmd0WVFoREl4YXpfVG9rZW46RFVzb2JIbzVab1g0bkh4dERLU2N0NnF0bjlmXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">幻读与不可重复读类似。它发生在一个事务读取了几行数据，接着另一个并发事务插入了一些数据时。在随后的查询中，第一个事务就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。例如：事务 <span class="number">2</span> 读取某个范围的数据，事务 <span class="number">1</span> 在这个范围插入了新的数据，事务 <span class="number">2</span> 再次读取这个范围的数据发现相比于第一次读取的结果多了新的数据。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=OTE1OTE3NmJmYzRhYTJiNDRjMjViOGNmYzhmMDVhMjdfN3pWUHk3S2d0TDRvVzlyRERtV3hRUkNrZFpaS1NsdDRfVG9rZW46Q0FkSWJSdktlbzEyN0Z4WFgyZGM5alRwbkRjXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="不可重复读和幻读有什么区别"><a href="#不可重复读和幻读有什么区别" class="headerlink" title="不可重复读和幻读有什么区别"></a>不可重复读和幻读有什么区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">不可重复读的重点是内容修改或者记录减少比如多次读取一条记录发现其中某些记录的值被修改；</span><br><span class="line">幻读的重点在于记录新增比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</span><br><span class="line">注意：记录减少是不可重复读。update和delete是不可重复读，insert是幻读</span><br><span class="line">    </span><br><span class="line">幻读其实可以看作是不可重复读的一种特殊情况，单独把区分幻读的原因主要是解决幻读和不可重复读的方案不一样。举个例子：执行 delete 和 update 操作的时候，可以直接对记录加锁，保证事务安全。而执行 insert 操作的时候，由于记录锁（Record Lock）只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁（Gap Lock）。也就是说执行 insert 操作的时候需要依赖 Next-Key Lock（Record Lock+Gap Lock） 进行加锁来保证不出现幻读。</span><br></pre></td></tr></table></figure><h3 id="并发事务的控制方式有哪些"><a href="#并发事务的控制方式有哪些" class="headerlink" title="并发事务的控制方式有哪些"></a>并发事务的控制方式有哪些</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL中的并发事务控制方式分为两种：锁和MVCC。锁可以看作是悲观控制的模式，多版本并发控制（MVCC，Multiversion concurrency control）可以看作是乐观控制的模式。</span><br></pre></td></tr></table></figure><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">锁 控制方式下会通过锁来显示控制共享资源而不是通过调度手段，MySQL 中主要是通过读写锁来实现并发控制。</span><br><span class="line">共享锁（S锁），又称为读锁，事务在读取记录时获取共享锁，允许多个事务同时获取（锁兼容）</span><br><span class="line">排他锁（x锁），又称为写锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。如果一个记录已经被加了排他锁，那其他事务不能再对这条记录加任何类型的锁（锁不兼容）。</span><br><span class="line">读写锁可以做到读读并行，但是无法做到写读、写写并行   </span><br><span class="line">根据根据锁粒度的不同，又被分为 表级锁(table-level locking) 和 行级锁(row-level locking) 。InnoDB 不光支持表级锁，还支持行级锁，默认为行级锁。行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说， InnoDB 的性能更高。不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类。</span><br></pre></td></tr></table></figure><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">READ-UNCOMMITTED(读取未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</span><br><span class="line">READ-COMMITTED(读取已提交)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</span><br><span class="line">REPEATABLE-READ(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。MySQL默认隔离级别。</span><br><span class="line">SERIALIZABLE（可串行化）：最高的隔离级别，完全服从 ACID 的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NzE0MzFiZDk1NWM0NTYzYjM0OGNiZTc4MjdjYmQzMWZfbFFUTjVEY1l2b25xMUZHNzZZbEt0VWpwc3NVeXBWRHZfVG9rZW46QVZlN2JhRVFHb0xnU0Z4WlNkN2N2d084blFlXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h2 id="锁-1"><a href="#锁-1" class="headerlink" title="锁"></a>锁</h2><h3 id="表级锁和行级锁"><a href="#表级锁和行级锁" class="headerlink" title="表级锁和行级锁"></a>表级锁和行级锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表级锁：是针对非索引字段加的锁，对当前操作的整张表加锁，资源消耗少，不会出现死锁。不过容易发生冲突，高并发下效率低。</span><br><span class="line">行级锁：是针对索引字段加的锁，只针对当前操作的行记录进行加锁。资源消耗大，会出现死锁，但大大减少冲突，高并发下效率高。</span><br></pre></td></tr></table></figure><h3 id="行级锁的使用有什么注意事项"><a href="#行级锁的使用有什么注意事项" class="headerlink" title="行级锁的使用有什么注意事项"></a>行级锁的使用有什么注意事项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InnoDB 的行锁是针对索引字段加的锁，表级锁是针对非索引字段加的锁。当我们执行 UPDATE、DELETE 语句时，如果 WHERE条件中字段没有命中唯一索引或者索引失效的话，就会导致扫描全表对表中的所有行记录进行加锁。这个在我们日常工作开发中经常会遇到，一定要多多注意！！！</span><br><span class="line">不过，很多时候即使用了索引也有可能会走全表扫描，这是因为 MySQL 优化器的原因。</span><br></pre></td></tr></table></figure><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、怎么理解行锁是针对索引字段加的锁，表锁是针对非索引字段加的锁，索引不同会怎么样？</span><br><span class="line"><span class="number">2</span>、整理加锁情况，锁优化情况，锁退化情况   </span><br></pre></td></tr></table></figure><h3 id="行锁分类"><a href="#行锁分类" class="headerlink" title="行锁分类"></a>行锁分类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL有三种行锁：</span><br><span class="line">记录锁（Record Lock）：也被称为记录锁，属于单个行记录上的锁。</span><br><span class="line">间隙锁（Gap Lock）：锁定一个范围，不包括记录本身。</span><br><span class="line">临键锁（Next-Key Lock）：Record Lock+Gap Lock，锁定一个范围，包含记录本身，主要目的是为了解决幻读问题。记录锁只能锁住已经存在的记录，为了避免插入新记录，需要依赖间隙锁。</span><br></pre></td></tr></table></figure><h3 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前面有记录</span><br><span class="line">由于MVCC存在，对于一般的SELECT语句，InnoDB 不会加任何锁。不过， 你可以通过以下语句显式加共享锁或排他锁。</span><br><span class="line">    </span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">5.7</span> 和 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line">SELECT ... LOCK IN SHARE MODE;</span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line">SELECT ... FOR SHARE;</span><br><span class="line"># 排他锁</span><br><span class="line">SELECT ... FOR UPDATE;    </span><br></pre></td></tr></table></figure><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那为什么由于MVCC存在，select不加锁，delete，insert，update又是怎样呢</span><br></pre></td></tr></table></figure><h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><h3 id="自增锁"><a href="#自增锁" class="headerlink" title="自增锁"></a>自增锁</h3><h3 id="当前读和快照读"><a href="#当前读和快照读" class="headerlink" title="当前读和快照读"></a>当前读和快照读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">快照读（一致性非锁定读）就是单纯的 SELECT 语句，但不包括下面这两类 SELECT 语句：</span><br><span class="line">SELECT ... FOR UPDATE</span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">5.7</span> 和 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line">SELECT ... LOCK IN SHARE MODE;</span><br><span class="line"># 共享锁 可以在 MySQL <span class="number">8.0</span> 中使用</span><br><span class="line">SELECT ... FOR SHARE;    </span><br></pre></td></tr></table></figure><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MVCC是InnoDB引擎特有的</span><br><span class="line">MVCC 是一种并发控制机制，用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性。它是通过在每个数据行上维护多个版本的数据来实现的。当一个事务要对数据库中的数据进行修改时，MVCC 会为该事务创建一个数据快照，而不是直接修改实际的数据行。</span><br></pre></td></tr></table></figure><h3 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、读操作（SELECT）：</span><br><span class="line">当一个事务执行读操作时，它会使用快照读取。快照读取是基于事务开始时数据库中的状态创建的，因此事务不会读取其他事务尚未提交的修改。具体工作情况如下：</span><br><span class="line"><span class="number">1</span>、对于读取操作，事务会查找符合条件的数据行，并选择符合其事务开始时间的数据版本进行读取。</span><br><span class="line"><span class="number">2</span>、如果某个数据行有多个版本，事务会选择不晚于其开始时间的最新版本，确保事务只读取在它开始之前已经存在的数据。</span><br><span class="line"><span class="number">3</span>、事务读取的是快照数据，因此其他并发事务对数据行的修改不会影响当前事务的读取操作。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、写操作（INSERT、UPDATE、DELETE）：</span><br><span class="line">当一个事务执行写操作时，它会生成一个新的数据版本，并将修改后的数据写入数据库。具体工作情况如下：</span><br><span class="line"><span class="number">1</span>、对于写操作，事务会为要修改的数据行创建一个新的版本，并将修改后的数据写入新版本。</span><br><span class="line"><span class="number">2</span>、新版本的数据会带有当前事务的版本号，以便其他事务能够正确读取相应版本的数据。</span><br><span class="line"><span class="number">3</span>、原始版本的数据仍然存在，供其他事务使用快照读取，这保证了其他事务不受当前事务的写操作影响。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、事务提交和回滚：</span><br><span class="line"><span class="number">1</span>、当一个事务提交时，它所做的修改将成为数据库的最新版本，并且对其他事务可见。</span><br><span class="line"><span class="number">2</span>、当一个事务回滚时，它所做的修改将被撤销，对其他事务不可见。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、版本的回收：</span><br><span class="line">为了防止数据库中的版本无限增长，MVCC 会定期进行版本的回收。</span><br></pre></td></tr></table></figure><h3 id="一致性非锁定读和锁定读"><a href="#一致性非锁定读和锁定读" class="headerlink" title="一致性非锁定读和锁定读"></a>一致性非锁定读和锁定读</h3><h4 id="一致性非锁定读"><a href="#一致性非锁定读" class="headerlink" title="一致性非锁定读"></a>一致性非锁定读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于一致性非锁定读的实现，通常做法是加一个版本号或者时间戳字段，在更新数据的同时版本号 + <span class="number">1</span> 或者更新时间戳。查询时，将当前可见的版本号与对应记录的版本号进行比对，如果记录的版本小于可见版本，则表示该记录可见</span><br><span class="line"></span><br><span class="line">在 InnoDB 存储引擎中，多版本控制就是对非锁定读的实现。如果读取的行正在执行 DELETE 或 UPDATE 操作，这时读取操作不会去等待行上锁的释放。相反地，InnoDB 存储引擎会去读取行的一个快照数据，对于这种读取历史数据的方式，我们叫它快照读。</span><br><span class="line">在Repeatable Read 和Read Committed两个隔离级别下，如果是执行普通的 select 语句（不包括 select ... lock in share mode ,select ... <span class="keyword">for</span> update）则会使用一致性非锁定读（MVCC）。并且在 Repeatable Read 下 MVCC 实现了可重复读和防止部分幻读</span><br></pre></td></tr></table></figure><h4 id="锁定读"><a href="#锁定读" class="headerlink" title="锁定读"></a>锁定读</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果执行的是下列语句，就是锁定读（Locking Reads）</span><br><span class="line">select ... lock in share mode</span><br><span class="line">select ... <span class="keyword">for</span> update</span><br><span class="line">insert、update、delete 操作</span><br><span class="line"></span><br><span class="line">在锁定读下，读取的是数据的最新版本，这种读也被称为当前读（current read）。锁定读会对读取到的记录加锁：</span><br><span class="line">select ... lock in share mode：对记录加 S 锁，其它事务也可以加S锁，如果加 x 锁则会被阻塞</span><br><span class="line">select ... <span class="keyword">for</span> update、insert、update、delete：对记录加 X 锁，且其它事务不能加任何锁</span><br><span class="line"></span><br><span class="line">在一致性非锁定读下，即使读取的记录已被其它事务加上 X 锁，这时记录也是可以被读取的，即读取的快照数据。上面说了，在Repeatable Read 下MVCC防止了部分幻读，这边的 “部分” 是指在一致性非锁定读 情况下，只能读取到第一次查询之前所插入的数据（根据 Read View 判断数据可见性，Read View 在第一次查询时生成）。但是如果是当前读 ，每次读取的都是最新数据，这时如果两次查询中间有其它事务插入数据，就会产生幻读。所以， InnoDB 在实现Repeatable Read时，如果执行的是当前读，则会对读取的记录使用 Next-key Lock ，来防止其它事务在间隙间插入数据</span><br></pre></td></tr></table></figure><h3 id="InnoDB-对-MVCC-的实现"><a href="#InnoDB-对-MVCC-的实现" class="headerlink" title="InnoDB 对 MVCC 的实现"></a>InnoDB 对 MVCC 的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MVCC的实现依赖于：隐藏字段、Read View、undo log。在内部实现中，InnoDB通过数据行的DB_TRX_ID 和Read View来判断数据的可见性，如不可见，则通过数据行的 DB_ROLL_PTR 找到 undo log 中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建 Read View 之前已经提交的修改和该事务本身做的修改</span><br></pre></td></tr></table></figure><h4 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a>隐藏字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在内部，InnoDB 存储引擎为每行数据添加了三个 隐藏字段：</span><br><span class="line">DB_TRX_ID（<span class="number">6</span>字节）：表示最后一次插入或更新该行的事务 id。此外，delete 操作在内部被视为更新，只不过会在记录头 Record header 中的 deleted_flag 字段将其标记为已删除</span><br><span class="line">DB_ROLL_PTR（<span class="number">7</span>字节） 回滚指针，指向该行的 undo log 。如果该行未被更新，则为空</span><br><span class="line">DB_ROW_ID（<span class="number">6</span>字节）：如果没有设置主键且该表没有唯一非空索引时，InnoDB 会使用该 id 来生成聚簇索引</span><br></pre></td></tr></table></figure><h4 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReadView</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  trx_id_t m_low_limit_id;      <span class="comment">/* 大于等于这个 ID 的事务均不可见 */</span></span><br><span class="line"></span><br><span class="line">  trx_id_t m_up_limit_id;       <span class="comment">/* 小于这个 ID 的事务均可见 */</span></span><br><span class="line"></span><br><span class="line">  trx_id_t m_creator_trx_id;    <span class="comment">/* 创建该 Read View 的事务ID */</span></span><br><span class="line"></span><br><span class="line">  trx_id_t m_low_limit_no;      <span class="comment">/* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */</span></span><br><span class="line"></span><br><span class="line">  ids_t m_ids;                  <span class="comment">/* 创建 Read View 时的活跃事务列表 */</span></span><br><span class="line"></span><br><span class="line">  m_closed;                     <span class="comment">/* 标记 Read View 是否 close */</span></span><br><span class="line">&#125;</span><br><span class="line">主要有以下字段：</span><br><span class="line">m_low_limit_id：目前出现过的最大的事务ID+<span class="number">1</span>，即下一个将被分配的事务ID。大于等于这个ID的数据版本均不可见</span><br><span class="line">m_up_limit_id：活跃事务列表 m_ids 中最小的事务 ID，如果 m_ids 为空，则 m_up_limit_id 为 m_low_limit_id。小于这个 ID 的数据版本均可见</span><br><span class="line">m_ids：Read View创建时其他未提交的活跃事务ID列表。创建Read View时，将当前未提交事务ID记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。m_ids不包括当前事务自己和已提交的事务（正在内存中）</span><br><span class="line">m_creator_trx_id：创建该 Read View 的事务 ID</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NDc1NzM5MzVkODQzZWI1NTNlZTI2N2YwMGExZDYyOTVfa0N5OE14U2FqS3hFbEhKRGFZdGxWclVtdkxQZTZNV0NfVG9rZW46THB5SGJqcERhb1Q3eGF4TVJuUmNlWnJ6bjFmXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="undo-log"><a href="#undo-log" class="headerlink" title="undo-log"></a>undo-log</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">undo log主要有两个作用：</span><br><span class="line">当事务回滚时用于将数据恢复到修改前的样子</span><br><span class="line">另一个作用是MVCC ，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过undo log 读取之前的版本数据，以此实现非锁定读</span><br><span class="line">在 InnoDB 存储引擎中 undo log 分为两种：insert undo log 和 update undo log：</span><br><span class="line">insert undo log：指在 insert 操作中产生的 undo log。因为 insert 操作的记录只对事务本身可见，对其他事务不可见，故该 undo log 可以在事务提交后直接删除。不需要进行 purge 操作</span><br><span class="line">insert 时的数据初始状态：</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NTAzYjRhMjFiNzE4NjJiMTUzYjhkZDI0NmM4OWI5MzNfOUVqQUs3UXFnWHhnTU9qbzJRZG1TVllUMWkwNnBJTmhfVG9rZW46VlRnVWIyUmVMb0FIbEx4NTNsZmNXeVprbjY4XzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为什么只对事务本身可见，其他事务不可见呢，为什么就能直接删除呢</span><br><span class="line">update undo log：update 或 delete 操作中产生的 undo log。该 undo log可能需要提供 MVCC 机制，因此不能在事务提交时就进行删除。提交时放入 undo log 链表，等待 purge线程 进行最后的删除</span><br><span class="line">数据第一次被修改时：</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=Y2ZhMmY2YzNjZDlmNjhhMDMyYWIzOGEzNmNiMDBjZDhfaUtIVzlxWHJIbzV2ZW9tVE8wTUFXOE5oZHNhVkd1OFpfVG9rZW46Q2IxeWJJVUlqb1VaS0p4aWhCNGNoekNLbjlnXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据第二次被修改时：</span><br></pre></td></tr></table></figure><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YmNkMDYyMTMwMjAyNmNiOTlmODgwNGY0NTFmYWQxNDhfTVpvUUlTaDg4SG15Y2pqeGZmTEJpNjRteFZkUFBscnVfVG9rZW46S2NlQmJYSW5Db3M0VVd4ektoaGMyMnVlbnRiXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不同事务或者相同事务的对同一记录行的修改，会使该记录行的 undo log 成为一条链表，链首就是最新的记录，链尾就是最早的旧记录。</span><br></pre></td></tr></table></figure><h4 id="数据可见性算法"><a href="#数据可见性算法" class="headerlink" title="数据可见性算法"></a>数据可见性算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 InnoDB 存储引擎中，创建一个新事务后，执行每个select 语句前都会创建一个快照（Read View），快照中保存了当前数据库系统中正处于活跃（没有 commit）的事务的 ID 号。其实简单的说保存的是系统中当前不应该被本事务看到的其他事务 ID 列表（即 m_ids）。当用户在这个事务中要读取某个记录行的时候，InnoDB 会将该记录行的 DB_TRX_ID 与 Read View 中的一些变量及当前事务 ID 进行比较，判断是否满足可见性条件</span><br></pre></td></tr></table></figure><h3 id="RC-和-RR-隔离级别下-MVCC-的差异"><a href="#RC-和-RR-隔离级别下-MVCC-的差异" class="headerlink" title="RC 和 RR 隔离级别下 MVCC 的差异"></a>RC 和 RR 隔离级别下 MVCC 的差异</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在事务隔离级别 RC 和 RR （InnoDB 存储引擎的默认事务隔离级别）下，InnoDB 存储引擎使用 MVCC（非锁定一致性读），但它们生成 Read View 的时机却不同</span><br><span class="line">在 RC 隔离级别下的 每次select 查询前都生成一个Read <span class="title function_">View</span> <span class="params">(m_ids 列表)</span></span><br><span class="line">在 RR 隔离级别下只在事务开始后 第一次select 数据前生成一个Read View（m_ids 列表）</span><br></pre></td></tr></table></figure><h3 id="MVCC-解决不可重复读问题"><a href="#MVCC-解决不可重复读问题" class="headerlink" title="MVCC 解决不可重复读问题"></a>MVCC 解决不可重复读问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虽然RC和RR都通过MVCC来读取快照数据，但由于生成Read View时机不同，从而在RR级别下实现可重复读</span><br><span class="line">总结： 在RC隔离级别下，事务在每次查询开始时都会生成并设置新的 Read View，所以导致不可重复读</span><br></pre></td></tr></table></figure><h3 id="MVCC➕Next-key-Lock-防止幻读"><a href="#MVCC➕Next-key-Lock-防止幻读" class="headerlink" title="MVCC➕Next-key-Lock 防止幻读"></a>MVCC➕Next-key-Lock 防止幻读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InnoDB存储引擎在 RR 级别下通过 MVCC和 Next-key Lock 来解决幻读问题：</span><br><span class="line"><span class="number">1</span>、执行普通 select，此时会以 MVCC 快照读的方式读取数据</span><br><span class="line">在快照读的情况下，RR隔离级别只会在事务开启后的第一次查询生成Read View ，并使用至事务提交。所以在生成Read View之后其它事务所做的更新、插入记录版本对当前事务并不可见，实现了可重复读和防止快照读下的 “幻读”</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、执行 select...<span class="keyword">for</span> update/lock in share mode、insert、update、delete 等当前读</span><br><span class="line">在当前读下，读取的都是最新的数据，如果其它事务有插入新的记录，并且刚好在当前事务查询范围内，就会产生幻读！InnoDB 使用 Next-key Lock来防止这种情况。当执行当前读时，会锁定读取到的记录的同时，锁定它们的间隙，防止其它事务在查询范围内插入数据。只要我不让你插入，就不会发生幻读</span><br></pre></td></tr></table></figure><ul><li>针对快照读（普通 select 语句），是通过 MVCC 方式解决了幻读。</li><li>针对当前读（select … for update 等语句），是通过 next-key lock（记录锁+间隙锁）方式解决了幻读。</li></ul><p>我举例了两个发生幻读场景的例子。</p><p>第一个例子：对于快照读， MVCC 并不能完全避免幻读现象。因为当事务 A 更新了一条事务 B 插入的记录，那么事务 A 前后两次查询的记录条目就不一样了，所以就发生幻读。</p><p>第二个例子：对于当前读，如果事务开启后，并没有执行当前读，而是先快照读，然后这期间如果其他事务插入了一条记录，那么事务后续使用当前读进行查询的时候，就会发现两次查询的记录条目就不一样了，所以就发生幻读。</p><p>所以，<strong>MySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。</strong></p><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h2 id="SQL语句在MySQL中的执行过程"><a href="#SQL语句在MySQL中的执行过程" class="headerlink" title="SQL语句在MySQL中的执行过程"></a>SQL语句在MySQL中的执行过程</h2><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h2 id="MySQl主从如何同步数据"><a href="#MySQl主从如何同步数据" class="headerlink" title="MySQl主从如何同步数据"></a>MySQl主从如何同步数据</h2><h3 id="为什么要主从复制"><a href="#为什么要主从复制" class="headerlink" title="为什么要主从复制"></a>为什么要主从复制</h3><ol><li>在业务复杂的系统中，有这么一个情景，有一句sql语句需要锁表，导致暂时不能使用读的服务，那么就很影响运行中的业务，使用主从复制，让主库负责写，从库负责读，这样，即使主库出现了锁表的情景，通过读从库也可以保证业务的正常运行。</li><li>做数据的热备，主库宕机后能够及时替换主库，保证业务可用性。</li><li>架构的扩展。业务量越来越大，I&#x2F;O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I&#x2F;O访问的频率，提高单个机器的I&#x2F;O性能。</li></ol><h3 id="MySQL主从复制流程"><a href="#MySQL主从复制流程" class="headerlink" title="MySQL主从复制流程"></a>MySQL主从复制流程</h3><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MjYyZTdkMzA2MTM1MzAyYmNmMWQ0NzllN2RlMzhkZTdfQmRvclRNVkdCcHoxRFBVRXFpaXRld285eEQxMmlDSFpfVG9rZW46VGowbWJtTGw3b01FODJ4b3A3OGNia0VLbjliXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><ol><li>主库db的更新事件(update、insert、delete)被写到binlog</li><li>主库创建一个binlog dump thread，把binlog的内容发送到从库</li><li>从库启动并发起连接，连接到主库</li><li>从库启动之后，创建一个I&#x2F;O线程，读取主库传过来的binlog内容并写入到relay log</li><li>从库启动之后，创建一个SQL线程，从relay log里面读取内容，从Exec_Master_Log_Pos位置开始执行读取到的更新事件，将更新内容写入到slave的db</li></ol><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MDNhYzU5NzNiZTAxZjg5MDdjMzcwYzkyYWY5YWJhOTdfOFh0ZVpuMHJHYlBxbUNJQ2U4OHQ4NVRvaWFudE9FVDRfVG9rZW46TUhiSmI1TXRMbzhCd2h4c1FLb2NTdTBKbllkXzE3Mjg2NTQ3MTc6MTcyODY1ODMxN19WNA" alt="img"></p><p><a href="https://zhuanlan.zhihu.com/p/335142300">MySQL主从同步详解</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>JAVA基础</title>
    <link href="http://example.com/2023/12/15/JAVA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2023/12/15/JAVA%E5%9F%BA%E7%A1%80/</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2024-10-11T13:48:51.349Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="基本类型和包装类型的区别"><a href="#基本类型和包装类型的区别" class="headerlink" title="基本类型和包装类型的区别"></a>基本类型和包装类型的区别</h3><p>用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且包装类型可用于泛型，而基本类型不可以。<br>存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被static修饰 ）存放在Java虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。<br>占用空间：相比于包装类型(对象类型), 基本数据类型占用的空间往往非常小。<br>默认值：成员变量包装类型不赋值就是null ，而基本类型有默认值且不是null。<br>比较方式：对于基本数据类型来说=&#x3D;比较的是值。对于包装数据类型来说=&#x3D;比较的是对象的内存地址。</p><p>强制：所有整型包装类对象之间值的比较，全部使用equals()方法。（需要重写equals()方法）<br>为什么说是几乎所有对象实例都存在于堆中呢？<br>这是因为HotSpot虚拟机引入了JIT优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存。</p><p>注意：基本数据类型存放在栈中是一个常见的误区！ 基本数据类型的成员变量如果没有被static修饰的话就存放在堆中。（不建议使用static修饰基础类型变量，应该要使用基本数据类型对应的包装类型）</p><h3 id="包装类型的缓存机制"><a href="#包装类型的缓存机制" class="headerlink" title="包装类型的缓存机制"></a>包装类型的缓存机制</h3><p>Byte,Short,Integer,Long这4种包装类默认创建了数值[-128，127]的相应类型的缓存数据，<br>Character创建了数值在[0,127]范围的缓存数据，<br>Boolean直接返回True或者False</p><p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。<br>两种浮点数类型的包装类 Float,Double 并没有实现缓存机制。<br>Integer i1 &#x3D; 40;<br>Integer i2 &#x3D; new Integer(40);<br>System.out.println(i1&#x3D;&#x3D;i2);<br>Integer i1&#x3D;40 这一行代码会发生装箱，也就是说这行代码等价于 Integer i1&#x3D;Integer.valueOf(40) 。因此，i1直接使用的是缓存中的对象。（.valueOf()方法会使用缓存）。<br>而Integer i2 &#x3D; new Integer(40) 会直接创建新的对象。</p><p>强制：所有整型包装类对象之间值的比较，全部使用equals方法比较。</p><h3 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h3><p>装箱：将基本类型用它们对应的引用类型包装起来；<br>拆箱：将包装类型转换为基本数据类型；</p><p>Integer i &#x3D; 10;  &#x2F;&#x2F;装箱<br>int n &#x3D; i;   &#x2F;&#x2F;拆箱<br>Integer i &#x3D; 10 等价于 Integer i &#x3D; Integer.valueOf(10)<br>int n &#x3D; i 等价于 int n &#x3D; i.intValue();</p><p>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</p><h3 id="浮点数运算有精度丢失的风险"><a href="#浮点数运算有精度丢失的风险" class="headerlink" title="浮点数运算有精度丢失的风险"></a>浮点数运算有精度丢失的风险</h3><p>float a &#x3D; 2.0f - 1.9f;<br>float b &#x3D; 1.8f - 1.7f;<br>System.out.println(a);&#x2F;&#x2F; 0.100000024<br>System.out.println(b);&#x2F;&#x2F; 0.099999905<br>System.out.println(a &#x3D;&#x3D; b);&#x2F;&#x2F; false</p><p>这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况</p><h4 id="如何解决精度丢失"><a href="#如何解决精度丢失" class="headerlink" title="如何解决精度丢失"></a>如何解决精度丢失</h4><p>BigDecimal可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过BigDecimal来做的。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="成员变量和局部变量区别"><a href="#成员变量和局部变量区别" class="headerlink" title="成员变量和局部变量区别"></a>成员变量和局部变量区别</h3><p>存储方式：从变量在内存中的存储方式来看，如果成员变量是使用static修饰的，那么这个成员变量是属于类的，存储在方法区。如果没有使用static修饰，这个成员变量是属于实例的，而对象存在于堆内存。局部变量属于方法，则存在于Java虚拟机栈内存。<br>生存时间：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。<br>默认值：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被final修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</p><h3 id="静态变量有什么作用"><a href="#静态变量有什么作用" class="headerlink" title="静态变量有什么作用"></a>静态变量有什么作用</h3><p>静态变量也就是被static关键字修饰的变量，静态变量只会被分配一次内存，即使创建多个对象都共享同一份静态变量。<br>静态变量是通过类名来访问的，ClassName.name,但如果变量被private修饰就无法这样访问了。    </p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="静态方法为什么不能调用非静态成员"><a href="#静态方法为什么不能调用非静态成员" class="headerlink" title="静态方法为什么不能调用非静态成员?"></a>静态方法为什么不能调用非静态成员?</h3><p>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。<br>在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</p><h3 id="重写和重载有什么区别"><a href="#重写和重载有什么区别" class="headerlink" title="重写和重载有什么区别"></a>重写和重载有什么区别</h3><p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理<br>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，就要覆盖父类方法</p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。<br>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。    </p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p><p>方法的重写要遵循“两同两小一大”：<br>“两同”即方法名相同、形参列表相同；<br>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；<br>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</p><p>关于重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p><p>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。    </p><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><h3 id="一个类没有声明构造方法"><a href="#一个类没有声明构造方法" class="headerlink" title="一个类没有声明构造方法"></a>一个类没有声明构造方法</h3><p>如果没有声明构造方法，Java会默认添加无参构造方法。如果有声明构造方法，无论有参还是无参，Java都不会再添加无参构造方法。</p><h3 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;<span class="comment">//id属性私有化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取id的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置id的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>不同类型的对象，相互之间经常有一些共同点。继承就是把这些共同点抽取出来，子类可以在父类基础上，扩展自己属性。<br>关于继承如下 3 点请记住：<br>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。<br>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<br>子类可以用自己的方式实现父类的方法。（以后介绍） </p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>子类只是拥有父类的属性和方法，这里拥有怎么理解呢？</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态表示一个对象具有多种状态，具体表现为父类的引用指向子类的实例。<br>多态特点：<br>1、对象类型和引用类型之间具有继承（类）&#x2F;实现（接口）的关系；<br>2、引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；<br>3、多态不能调用“只在子类存在但在父类不存在”的方法；<br>4、如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</p><h3 id="接口类和抽象类"><a href="#接口类和抽象类" class="headerlink" title="接口类和抽象类"></a>接口类和抽象类</h3><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><p>1、都不能被实例化<br>2、都可以包含抽象方法<br>3、都可以有默认实现方法（Java 8可以用default关键字在接口中定义默认方法）。    </p><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>1、不懂这个默认实现方法是什么意思</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>1、接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系。<br>2、一个类只能继承一个类，但是可以实现多个接口。<br>3、接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值。</p><h3 id="深拷贝和浅拷贝区别？什么是引用拷贝？"><a href="#深拷贝和浅拷贝区别？什么是引用拷贝？" class="headerlink" title="深拷贝和浅拷贝区别？什么是引用拷贝？"></a>深拷贝和浅拷贝区别？什么是引用拷贝？</h3><h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><p>浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。<br>深拷贝：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</p><h4 id="引用拷贝"><a href="#引用拷贝" class="headerlink" title="引用拷贝"></a>引用拷贝</h4><p>引用拷贝就是两个不同的引用指向同一个对象。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGNmMmQwMGJlMmQyZjgyMDkwOTk4ZDQxNWNiMzM4ZTBfY3liT0xPYWM2c05NZG9YNWppSEdGTklrazJsY2s5djZfVG9rZW46RnM3dWJqODEwb1R5dU54SVFMa2NPVW1lbnBoXzE3Mjg2NTM5OTk6MTcyODY1NzU5OV9WNA" alt="img"></p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="和equals-区别"><a href="#和equals-区别" class="headerlink" title="&#x3D;&#x3D;和equals()区别"></a>&#x3D;&#x3D;和equals()区别</h3><p>=&#x3D;对于基础类型和引用类型的作用效果是不同的：<br>对于基本数据类型来说，=&#x3D;比较的是值<br>对于引用数据类型来说，=&#x3D;比较的是内存地址<br>equals()不能用于判断基本数据类型变量，只能用来判断两个对象是否相等。equals()存在于Object类中，所以所有类都有equals()方法。<br>equals()方法存在两种使用情况：<br>1、类没有重写equals()方法：通过equals()比较该类的两个对象时，等价于通过“&#x3D;&#x3D;”比较这两个对象，使用的默认是Object类equals()方法。<br>2、类重写了equals()方法：一般我们都重写equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回true(即，认为这两个对象相等)。<br>String中的equals方法是被重写过的，因为Object的equals方法是比较的对象的内存地址，而String的equals方法比较的是对象的值。<br>当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象</p><h3 id="hashCode-有什么用"><a href="#hashCode-有什么用" class="headerlink" title="hashCode()有什么用"></a>hashCode()有什么用</h3><p>1、hashCode()定义在JDK的Object类中，这就意味着Java中的任何类都包含有hashCode()函数。另外需要注意的是：Object的hashCode()方法是本地方法，也就是用C语言或C++实现的。<br>2、hashCode() 的作用是获取哈希码（int 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。<br>3、hashCode()和equals()都是用于比较两个对象是否相等。 </p><h4 id="为什么JDK要同时提供两个方法呢"><a href="#为什么JDK要同时提供两个方法呢" class="headerlink" title="为什么JDK要同时提供两个方法呢"></a>为什么JDK要同时提供两个方法呢</h4><p>因为在一些容器中，有了hashCode()可以减少equals()次数，降低查找成本。比如：<br>当你把对象加入HashSet时，HashSet会先计算对象的hashCode值来判断对象加入的位置，同时也会与其他已经加入的对象的hashCode值作比较，如果没有相符的hashCode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashCode值的对象，这时会调用equals（）方法来检查hashCode相等的对象是否真的相同。如果两者相同，HashSet就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了equals的次数，相应就大大提高了执行速度。  </p><h4 id="为什么不只提供-hashCode-方法呢"><a href="#为什么不只提供-hashCode-方法呢" class="headerlink" title="为什么不只提供 hashCode() 方法呢"></a>为什么不只提供 hashCode() 方法呢</h4><p>这是因为两个对象的hashCode值相等并不代表两个对象就相等。(Hash冲突)</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1、如果两个对象的hashCode值相等，那这两个对象不一定相等（哈希碰撞）。<br>2、如果两个对象的hashCode值相等并且equals()方法也返回 true，我们才认为这两个对象相等。<br>3、如果两个对象的hashCode值不相等，我们就可以直接认为这两个对象不相等。</p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>1、这里没有理解清楚，有点混乱，需要整理一下。</p><h3 id="为什么重写-equals-时必须重写-hashCode-方法？"><a href="#为什么重写-equals-时必须重写-hashCode-方法？" class="headerlink" title="为什么重写 equals() 时必须重写 hashCode() 方法？"></a>为什么重写 equals() 时必须重写 hashCode() 方法？</h3><p>1、因为两个相等的对象的hashCode值必须是相等。也就是说如果equals方法判断两个对象是相等的，那这两个对象的hashCode值也要相等。<br>2、如果重写equals()时没有重写hashCode()方法的话就可能会导致equals方法判断是相等的两个对象，hashCode 值却不相等。</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="String，StringBuffer，StringBuilder"><a href="#String，StringBuffer，StringBuilder" class="headerlink" title="String，StringBuffer，StringBuilder"></a>String，StringBuffer，StringBuilder</h3><p>1、String是不可变的<br>2、StringBuffer和StingBuilder都是可以拼接字符串的<br>3、String是常量，线程安全的，StringBuffer对方法加了同步锁，是线程安全的。StringBuilder没有对方法加同步锁，所以是非线程安全的。    </p><h3 id="String类为什么是不可变的"><a href="#String类为什么是不可变的" class="headerlink" title="String类为什么是不可变的"></a>String类为什么是不可变的</h3><p>public final class String implements java.io.Serializable, Comparable<String>, CharSequence {<br>    private final char value[];<br>        &#x2F;&#x2F;…<br>}<br>1、保存字符串的数组被final修饰且为私有的，并且String类没有提供&#x2F;暴露修改这个字符串的方法。<br>2、String类被final修饰导致其不能被继承，进而避免了子类破坏String不可变。<br>我们知道被final关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象。因此，final关键字修饰的数组保存字符串并不是String不可变的根本原因，因为这个数组保存的字符串是可变的（final修饰引用类型变量的情况）。</p><h3 id="字符串拼接使用“-”还是StringBuilder"><a href="#字符串拼接使用“-”还是StringBuilder" class="headerlink" title="字符串拼接使用“+”还是StringBuilder"></a>字符串拼接使用“+”还是StringBuilder</h3><p>字符串对象通过“+”的字符串拼接方式，实际上是通过StringBuilder调用append()方法实现的，拼接完成后调用toSting()得到一个String对象。<br>在循环内使用“+”进行字符串拼接，会导致创建过多的StringBuilder对象，下面使用StringBuilder不会存在这样的问题：<br>String[] arr &#x3D; {“he”, “llo”, “world”};<br>StringBuilder s &#x3D; new StringBuilder();<br>for (String value : arr) {<br>    s.append(value);<br>}<br>System.out.println(s);</p><h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>字符串常量池 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><p>示例：<br>&#x2F;&#x2F; 在堆中创建字符串对象”ab“<br>&#x2F;&#x2F; 将字符串对象”ab“的引用保存在字符串常量池中<br>String aa &#x3D; “ab”;<br>&#x2F;&#x2F; 直接返回字符串常量池中字符串对象”ab“的引用<br>String bb &#x3D; “ab”;<br>System.out.println(aa&#x3D;&#x3D;bb);&#x2F;&#x2F; true</p><h4 id="String-s1-new-String-“abc”-这句话创建了几个字符串对象？"><a href="#String-s1-new-String-“abc”-这句话创建了几个字符串对象？" class="headerlink" title="String s1 &#x3D; new String(“abc”);这句话创建了几个字符串对象？"></a>String s1 &#x3D; new String(“abc”);这句话创建了几个字符串对象？</h4><p>1、如果字符串常量池中不存在字符串对象“abc”的引用，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。<br>2、如果字符串常量池中已存在字符串对象“abc”的引用，则只会在堆中创建 1 个字符串对象“abc”。    </p><h3 id="String的intern方法有什么作用"><a href="#String的intern方法有什么作用" class="headerlink" title="String的intern方法有什么作用"></a>String的intern方法有什么作用</h3><h3 id="String-类型的变量和常量做“-”运算时发生了什么？"><a href="#String-类型的变量和常量做“-”运算时发生了什么？" class="headerlink" title="String 类型的变量和常量做“+”运算时发生了什么？"></a>String 类型的变量和常量做“+”运算时发生了什么？</h3><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="try-catch-finally-如何使用？"><a href="#try-catch-finally-如何使用？" class="headerlink" title="try-catch-finally 如何使用？"></a>try-catch-finally 如何使用？</h3><p>try块：用于捕获异常。其后可接零个或多个catch块，如果没有catch块，则必须跟一个finally块。<br>catch块：用于处理try捕获到的异常。<br>finally块：无论是否捕获或处理异常，finally块里的语句都会被执行。当在try块或catch块中遇到return语句时，finally语句块将在方法返回之前被执行。<br>注意：不要在finally语句块中使用return!当try语句和finally语句中都有return语句时，try语句块中的return语句会被忽略。这是因为try语句中的return返回值会先被暂存在一个本地变量中，当执行到finally语句中的return之后，这个本地变量的值就变为了finally语句中的return返回值</p><h3 id="finally中的代码一定会执行吗"><a href="#finally中的代码一定会执行吗" class="headerlink" title="finally中的代码一定会执行吗"></a>finally中的代码一定会执行吗</h3><p>不一定！在某些情况下，finally中的代码不会被执行。<br>1、finally执行之前虚拟机被终止运行，finally中的代码就不会被执行。<br>2、程序所在的线程死亡<br>3、关闭CPU</p><h3 id="异常使用有哪些需要注意的地方"><a href="#异常使用有哪些需要注意的地方" class="headerlink" title="异常使用有哪些需要注意的地方"></a>异常使用有哪些需要注意的地方</h3><p>1、使用日志打印异常之后就不要再抛出异常了</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="什么是泛型擦除机制？为什么要擦除？"><a href="#什么是泛型擦除机制？为什么要擦除？" class="headerlink" title="什么是泛型擦除机制？为什么要擦除？"></a>什么是泛型擦除机制？为什么要擦除？</h3><p>Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，这也是通常所说类型擦除。<br>编译器会在编译期间动态的将泛型T擦除为Object或将T entends xxx擦除为其限定类型xxx。<br>因此，泛型本质上其实是编译器行为（所以在运行期间通过反射是可以添加的），为了保证引入泛型机制但不创建新的类型，减少虚拟机的运行开销，编译器通过擦除将泛型类转化为一般类。</p><p>List<Integer> list &#x3D; new ArrayList&lt;&gt;();</p><p>list.add(12);<br>&#x2F;&#x2F;1.编译期间直接添加会报错<br>list.add(“a”);<br>Class&lt;? extends List&gt; clazz &#x3D; list.getClass();<br>Method add &#x3D; clazz.getDeclaredMethod(“add”, Object.class);<br>&#x2F;&#x2F;2.运行期间通过反射添加，是可以的<br>add.invoke(list, “kl”);</p><p>System.out.println(list)    </p><h4 id="既然要消除，为什么还要用泛型呢，直接用Object代替不行吗？"><a href="#既然要消除，为什么还要用泛型呢，直接用Object代替不行吗？" class="headerlink" title="既然要消除，为什么还要用泛型呢，直接用Object代替不行吗？"></a>既然要消除，为什么还要用泛型呢，直接用Object代替不行吗？</h4><p>泛型的作用：<br>1、使用泛型可在编译期间进行类型检查<br>2、泛型可以使用自限定类型如 T extends Comparable<br>3、使用Object类型需要手动添加强制类型转换，降低代码可读性，提高出错概率。（使用泛型的原因之一就是不用强制类型转换）    </p><h3 id="什么是桥方法"><a href="#什么是桥方法" class="headerlink" title="什么是桥方法"></a>什么是桥方法</h3><p>桥方法(Bridge Method) 用于继承泛型类时保证多态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123; <span class="built_in">this</span>.data = data; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Node.setData&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNode</span> <span class="keyword">extends</span> <span class="title class_">Node</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyNode</span><span class="params">(Integer data)</span> &#123; <span class="built_in">super</span>(data); &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Node&lt;T&gt; 泛型擦除后为 setData(Object data)，而子类 MyNode 中并没有重写该方法，所以编译器会加入该桥方法保证多态</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        setData((Integer) data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Integer data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyNode.setData&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 ：桥方法为编译器自动生成，非手写。</p><h3 id="以下代码是否能编译，为什么？"><a href="#以下代码是否能编译，为什么？" class="headerlink" title="以下代码是否能编译，为什么？"></a>以下代码是否能编译，为什么？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Algorithm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">max</span><span class="params">(T x, T y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法编译，因为 x 和 y 都会被擦除为<code> Object</code> 类型，<code>Object</code>无法使用<code>&gt;</code>进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>&lt;T&gt;();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">T</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法编译，因为不能使用 <code>static </code>修饰泛型<code> T</code> 。</p><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><p>看看结果集泛型的封装</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h4 id="什么是通配符"><a href="#什么是通配符" class="headerlink" title="什么是通配符"></a>什么是通配符</h4><p>泛型类型是固定的，某些场景下使用起来不太灵活。而通配符可以允许类型参数变化，用来解决泛型无法协变的问题。<br>&#x2F;&#x2F; 限制类型为 Person 的子类<br>&lt;? extends Person&gt;<br>&#x2F;&#x2F; 限制类型为 Manager 的父类<br>&lt;? super Manager&gt;    </p><h4 id="通配符？和泛型T有什么区别"><a href="#通配符？和泛型T有什么区别" class="headerlink" title="通配符？和泛型T有什么区别"></a>通配符？和泛型T有什么区别</h4><p>1、T可以用于声明变量或常量而通配符？不行<br>2、T在编译期会被擦除为限定类型或Object，通配符用于捕获具体类型。<br>3、T一般用于声明泛型类或方法，通配符？一般用于泛型方法的调用代码和形参。    </p><h4 id="什么是无界通配符"><a href="#什么是无界通配符" class="headerlink" title="什么是无界通配符"></a>什么是无界通配符</h4><p>无界通配符可以接收任何泛型类型数据，用于实现不依赖于具体类型参数的简单方法，可以捕获参数类型并交由泛型方法进行处理。<br>void testMethod(Person<?> p) {  // 泛型方法自行处理}    List<?> 和 List 有区别吗？<br>List&lt;?&gt; list 表示list是持有某种特定类型的List，但是不知道具体是哪种类型。因此，我们添加元素进去的时候会报错。<br>List list表示list是持有的元素的类型是Object，因此可以添加任何类型的对象，只不过编译器会有警告信息。</p><p>List&lt;?&gt; list &#x3D; new ArrayList&lt;&gt;();<br>list.add(“sss”);&#x2F;&#x2F;报错<br>List list2 &#x3D; new ArrayList&lt;&gt;();<br>list2.add(“sss”);&#x2F;&#x2F;警告信息</p><h4 id="上边界通配符和下边界通配符"><a href="#上边界通配符和下边界通配符" class="headerlink" title="上边界通配符和下边界通配符"></a>上边界通配符和下边界通配符</h4><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射实战"><a href="#反射实战" class="headerlink" title="反射实战"></a>反射实战</h3><h4 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h4><p>Class类对象将一个类的方法，变量等信息告诉运行的程序。Java提供了四种方式获取Class对象</p><h5 id="知道具体类情况下可以使用"><a href="#知道具体类情况下可以使用" class="headerlink" title="知道具体类情况下可以使用"></a>知道具体类情况下可以使用</h5><p>Class alunbarClass &#x3D; TargetObject.class;</p><h5 id="通过Class-forName-传入类的全路径获取"><a href="#通过Class-forName-传入类的全路径获取" class="headerlink" title="通过Class.forName()传入类的全路径获取"></a>通过Class.forName()传入类的全路径获取</h5><p>Class alunbarClass1 &#x3D; Class.forName(“cn.javaguide.TargetObject”);</p><h5 id="通过对象实例instance-getClass-获取"><a href="#通过对象实例instance-getClass-获取" class="headerlink" title="通过对象实例instance.getClass()获取"></a>通过对象实例instance.getClass()获取</h5><p>TargetObject o &#x3D; new TargetObject();<br>Class alunbarClass2 &#x3D; o.getClass();</p><h5 id="通过类加载器xxxClassLoader-loadClass-传入类路径获取"><a href="#通过类加载器xxxClassLoader-loadClass-传入类路径获取" class="headerlink" title="通过类加载器xxxClassLoader.loadClass()传入类路径获取"></a>通过类加载器xxxClassLoader.loadClass()传入类路径获取</h5><p>ClassLoader.getSystemClassLoader().loadClass(“cn.javaguide.TargetObject”);<br>通过类加载器获取Class对象不会进行初始化，不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行</p><h4 id="其他操作待补充"><a href="#其他操作待补充" class="headerlink" title="其他操作待补充"></a>其他操作待补充</h4><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化：将数据结构或对象转换成二进制字节流的过程<br>反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</p><h3 id="序列化和反序列化常见应用场景"><a href="#序列化和反序列化常见应用场景" class="headerlink" title="序列化和反序列化常见应用场景"></a>序列化和反序列化常见应用场景</h3><p>对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；<br>将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；<br>将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；<br>将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。</p><h3 id="常见的序列化协议"><a href="#常见的序列化协议" class="headerlink" title="常见的序列化协议"></a>常见的序列化协议</h3><p>JDK自带的序列化方式一般不会用，因为序列化效率低并且存在安全问题。JSON和XML这种属于文本类序列化方式，虽然可读性较好，但是性能较差，一般不会选择。<br>比较常用的序列化协议有Hessian，Kryo，Protobuf，ProtoStuff，这些都是基于二进制的序列化协议。    </p><h4 id="JDK自带的序列化方式"><a href="#JDK自带的序列化方式" class="headerlink" title="JDK自带的序列化方式"></a>JDK自带的序列化方式</h4><p>JDK自带的序列化，只需实现java.io.Serializable接口即可。<br>public class RpcRequest implements Serializable {<br>    private static final long serialVersionUID &#x3D; 1905122041950251207L;<br>    private String requestId;<br>    private String interfaceName;<br>    private String methodName;<br>    private Object[] parameters;<br>    private Class&lt;?&gt;[] paramTypes;<br>    private RpcMessageTypeEnum rpcMessageTypeEnum;<br>}<br>serialVersionUID有什么作用？<br>序列化号 serialVersionUID 属于版本控制的作用。反序列化时，会检查 serialVersionUID 是否和当前类的 serialVersionUID 一致。如果 serialVersionUID 不一致则会抛出 InvalidClassException 异常。强烈推荐每个序列化类都手动指定其 serialVersionUID，如果不手动指定，那么编译器会动态生成默认的 serialVersionUID。</p><p>serialVersionUID 不是被static变量修饰了吗？为什么还会被“序列化”？<br>static修饰的变量是静态变量，位于方法区，本身是不会被序列化的。但是serialVersionUID的序列化做了特殊处理，在序列化时，会将serialVersionUID序列化到二进制字节流中，在反序列化时，也会解析它并做一致性判断。 也就是说，serialVersionUID只是用来被JVM识别，实际并没有被序列化。<br>如果有些字段不想进行序列化怎么办？<br>可以使用transient关键字修饰。transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。<br>关于transient还有几点注意：<br>1、transient只能修饰变量，不能修饰类和方法。<br>2、transient修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰int类型，那么反序列后结果就是0。<br>3、static变量因为不属于任何对象，所以无论有没有transient关键字修饰，均不会被序列化。<br>为什么不推荐使用 JDK 自带的序列化？主要原因有下面这些原因：<br>1、不支持跨语言调用 : 如果调用的是其他语言开发的服务的时候就不支持了。<br>2、性能差：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。<br>3、存在安全问题</p><h4 id="Kryo"><a href="#Kryo" class="headerlink" title="Kryo"></a>Kryo</h4><p>Kryo 是专门针对 Java 语言序列化方式并且性能非常好，如果你的应用是专门针对 Java 语言的话可以考虑使用</p><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h2 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h2><p>值传递：方法接收的是实参值的拷贝，会创建副本。<br>引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</p><h3 id="为什么Java中只有值传递"><a href="#为什么Java中只有值传递" class="headerlink" title="为什么Java中只有值传递"></a>为什么Java中只有值传递</h3><p>案例1：传递基本参数类型，这个简单不写了<br>案例2：传递引用类型参数 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">   System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">   change(arr);</span><br><span class="line">   System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">    array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这个案例看上去是引用传递，其实是值传递，这个值是实参的地址。<br>也就是说change方法的参数拷贝的是arr（实参）的地址，因此，它和arr指向的是同一数组对象。引用传递是不会拷贝参数的，用案例3进一步说明    </p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NTlkODhiNThhMTdkNzE0YzRlZjg4NTg3NTViYWY0MjJfcjlWejRSUHJqSmpUZzRBU0U2Ymg5djZ4WEF3YllXS3NfVG9rZW46UEFDOGJia0hCb0lodEJ4dVRuaGNkUFdLbmxoXzE3Mjg2NTM5OTk6MTcyODY1NzU5OV9WNA" alt="img"></p><p>案例 3：传递引用类型参数 2<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoZhang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoLi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">    swap(xiaoZhang, xiaoLi);</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaoZhang:&quot;</span> + xiaoZhang.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaoLi:&quot;</span> + xiaoLi.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Person person1, Person person2)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">temp</span> <span class="operator">=</span> person1;</span><br><span class="line">    person1 = person2;</span><br><span class="line">    person2 = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;person1:&quot;</span> + person1.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;person2:&quot;</span> + person2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">person1:小李</span><br><span class="line">person2:小张</span><br><span class="line">xiaoZhang:小张</span><br><span class="line">xiaoLi:小李</span><br></pre></td></tr></table></figure></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>swap方法的参数person1和person2只是拷贝的实参xiaoZhang和xiaoLi的地址。因此， person1和person2的互换只是拷贝的两个地址的互换罢了，并不会影响到实参xiaoZhang和xiaoLi。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NGU2YTE4ODdjNjk3MmY0MGJiNWZmMmY4ZTFhOWZmMWRfUThxVmdSRGVzS2lFR3Z1ZkNxdU5RRGpoNG1xMXp0a3ZfVG9rZW46QXE3RmJCSkk0b2J4SGR4eDF3bGNlRUdTblJnXzE3Mjg2NTM5OTk6MTcyODY1NzU5OV9WNA" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JAVA" scheme="http://example.com/categories/JAVA/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://example.com/2023/12/15/Redis/"/>
    <id>http://example.com/2023/12/15/Redis/</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2024-10-11T14:08:32.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>String：<strong>简单动态字符串（SDS）</strong>     </p><p>List：<strong>双向链表或压缩列表</strong>； 如果列表元素个数小于512，列表每个元素大小小于64字节，使用压缩列表作为底层数据结构，否则使用双向链表作为底层数据结构。 Redis3.2版本以后，List底层数据结构只使用quicklist，替代双向链表和压缩列表      </p><p>Hash：<strong>压缩列表或哈希表</strong>； 如果哈希类型元素个数小于512个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于64字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis会使用压缩列表作为Hash类型的底层数据结构； 如果哈希类型元素不满足上面条件，Redis会使用哈希表作为Hash类型的底层数据结构。 在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由listpack数据结构来实现了。     </p><p>Set 类型的底层数据结构是由<strong>哈希表或整数集合</strong>实现的： 如果集合中的元素都是整数且元素个数小于512（默认值，set-maxintset-entries配置）个，Redis会使用整数集合作为Set类型的底层数据结构； 如果集合中的元素不满足上面条件，则Redis使用哈希表作为Set类型的底层数据结构。     </p><p>Zset 类型的底层数据结构是由<strong>压缩列表或跳表</strong>实现的： 如果有序集合的元素个数小于128个，并且每个元素的值小于64字节时，Redis会使用压缩列表作为Zset类型的底层数据结构； 如果有序集合的元素不满足上面的条件，Redis会使用跳表作为Zset类型的底层数据结构； 在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由listpack数据结构来实现了。 </p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDJjMTE1MjY5M2VkNjIxOWEzZGE0NzI3NTg5NDAyNjJfY1dwRDIwVVFDa0RSUGx1eXg4cnBpYkhUNkcxQjdJaUNfVG9rZW46RGNSVWJQR2gzbzcwc0F4WXNPWmNHWHZXblBlXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><h3 id="Redis键值对数据库是如何实现的"><a href="#Redis键值对数据库是如何实现的" class="headerlink" title="Redis键值对数据库是如何实现的"></a>Redis键值对数据库是如何实现的</h3><p>Redis 的键值对中的 key 就是字符串对象，而 value 可以是字符串对象，也可以是集合数据类型的对象。</p><p>Redis 是使用了一个「哈希表」保存所有键值对，哈希表的最大好处就是让我们可以用 O(1) 的时间复杂度来快速查找到键值对。哈希表其实就是一个数组，数组中的元素叫做哈希桶。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=OTMxMDUyOGU3ZmY3NDU0Y2RkNTQ3MWVhOGU0MmJkNWNfaXJrODF4RTdrRVhneUswYUZRYktRY2pCeGpDcUlqSzdfVG9rZW46TGZPS2J4b0kwb1htY3l4REo4TWNrajVMbmJjXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><ul><li>redisDb 结构，表示 Redis 数据库的结构，结构体里存放了指向了 dict 结构的指针；</li><li>dict 结构，结构体里存放了 2 个哈希表，正常情况下都是用「哈希表1」，「哈希表2」只有在 rehash 的时候才用；</li><li>ditctht 结构，表示哈希表的结构，结构里存放了哈希表数组，数组中的每个元素都是指向一个哈希表节点结构（dictEntry）的指针；</li><li>dictEntry 结构，表示哈希表节点的结构，结构里存放了 void * key 和 void * value 指针， <em>k</em><em><strong>ey 指向的是 String 对象，而 value 则可以指向 String 对象，也可以指向集合类型的对象，比如 List 对象、Hash 对象、Set 对象和 Zset 对象</strong></em><strong>。</strong></li><li>void * key 和 void * value 指针指向的是 Redis 对象，Redis 中的每个对象都由 redisObject 结构表示</li></ul><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDkxMjZhMzg4ODZmOGJlNzlkMzU2MTkyN2E5MjUwMjhfYjBoQkRSYjdWZUhKU1RoNENWSGtzVDh6MElUeXJ5UUpfVG9rZW46Sjhxa2JjVEtFb204Q2t4WU1mY2MySHp6bmFlXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>对象结构里包含的成员变量：</p><ul><li>type，标识该对象是什么类型的对象（String 对象、 List 对象、Hash 对象、Set 对象和 Zset 对象）；</li><li>encoding，标识该对象使用了哪种底层的数据结构；</li><li>ptr，指向底层数据结构的指针。</li></ul><h3 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h3><p>Redis 是用 C 语言实现的，但是它没有直接使用 C 语言的 char* 字符数组来实现字符串，而是自己封装了一个名为简单动态字符串（simple dynamic string，SDS） 的数据结构来表示字符串，也就是 Redis 的 String 数据类型的底层数据结构是 SDS。</p><h4 id="C语言字符串的缺陷"><a href="#C语言字符串的缺陷" class="headerlink" title="C语言字符串的缺陷"></a>C语言字符串的缺陷</h4><ul><li>获取字符串长度的时间复杂度为 O（N）；</li><li>字符串的结尾是以 “\0” 字符标识，字符串里面不能包含有 “\0” 字符，因此不能保存二进制数据；</li><li>字符串操作函数不高效且不安全，比如有缓冲区溢出的风险，有可能会造成程序运行终止；</li></ul><h4 id="SDS结构设计"><a href="#SDS结构设计" class="headerlink" title="SDS结构设计"></a>SDS结构设计</h4><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MjYzOWI5ZDQ5MWEwMmU4ZDE3Nzk3OWJmMzZmYTkzYzZfUlA0bENDaXFOZENUd0ZSc0pXckxveXVPNG9ab2VDN25fVG9rZW46THN6U2JheDkyb0tsTjh4T21FTGNHRUVObldnXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><ul><li>len，记录了字符串长度。这样获取字符串长度的时候，只需要返回这个成员变量值就行，时间复杂度只需要 O（1）。</li><li>alloc，分配给字符数组的空间长度。这样在修改字符串的时候，可以通过 <code>alloc - len</code> 计算出剩余的空间大小，可以用来判断空间是否满足修改需求，如果不满足的话，就会自动将 SDS 的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用 SDS 既不需要手动修改 SDS 的空间大小，也不会出现前面所说的缓冲区溢出的问题。</li><li>flags，用来表示不同类型的 SDS。一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。</li><li>buf[]，字符数组，用来保存实际数据。不仅可以保存字符串，也可以保存二进制数据。</li></ul><h5 id="O（1）复杂度获取字符串长度"><a href="#O（1）复杂度获取字符串长度" class="headerlink" title="O（1）复杂度获取字符串长度"></a>O（1）复杂度获取字符串长度</h5><p>获取字符串长度的时候，直接返回这个成员变量的值就行，所以复杂度只有 O（1）。</p><h5 id="二进制安全"><a href="#二进制安全" class="headerlink" title="二进制安全"></a>二进制安全</h5><p>有个专门的 len 成员变量来记录长度，所以可存储包含 “\0” 的数据。</p><p>SDS 的 API 都是以处理二进制的方式来处理 SDS 存放在 buf[] 里的数据，程序不会对其中的数据做任何限制，数据写入的时候时什么样的，它被读取时就是什么样的。</p><p>通过使用二进制安全的 SDS，而不是 C 字符串，使得 Redis 不仅可以保存文本数据，也可以保存任意格式的二进制数据。</p><h5 id="不会发生缓冲区溢出"><a href="#不会发生缓冲区溢出" class="headerlink" title="不会发生缓冲区溢出"></a>不会发生缓冲区溢出</h5><p>Redis 的 SDS 结构里引入了 alloc 和 len 成员变量，这样 SDS API 通过 <code>alloc - len</code> 计算，可以算出剩余可用的空间大小，这样在对字符串做修改操作的时候，就可以由程序内部判断缓冲区大小是否足够用。</p><p>而且，当判断出缓冲区大小不够用时，Redis 会自动将扩大 SDS 的空间大小，以满足修改所需的大小。</p><h5 id="SDS扩容规则"><a href="#SDS扩容规则" class="headerlink" title="SDS扩容规则"></a>SDS扩容规则</h5><p>扩容规则代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hisds <span class="title function_">hi_sdsMakeRoomFor</span><span class="params">(hisds s, <span class="type">size_t</span> addlen)</span></span><br><span class="line">&#123;</span><br><span class="line">... ...</span><br><span class="line">    <span class="comment">// s目前的剩余空间已足够，无需扩展，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (avail &gt;= addlen)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    <span class="comment">//获取目前s的长度</span></span><br><span class="line">    len = hi_sdslen(s);</span><br><span class="line">    sh = (<span class="type">char</span> *)s - hi_sdsHdrSize(oldtype);</span><br><span class="line">    <span class="comment">//扩展之后 s 至少需要的长度</span></span><br><span class="line">    newlen = (len + addlen);</span><br><span class="line">    <span class="comment">//根据新长度，为s分配新空间所需要的大小</span></span><br><span class="line">    <span class="keyword">if</span> (newlen &lt; HI_SDS_MAX_PREALLOC)</span><br><span class="line">        <span class="comment">//新长度&lt;HI_SDS_MAX_PREALLOC 则分配所需空间*2的空间</span></span><br><span class="line">        newlen *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//否则，分配长度为目前长度+1MB</span></span><br><span class="line">        newlen += HI_SDS_MAX_PREALLOC;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果所需的 sds 长度小于 1 MB，那么最后的扩容是按照翻倍扩容来执行的，即 2 倍的newlen</li><li>如果所需的 sds 长度超过 1 MB，那么最后的扩容长度应该是 newlen 1MB。</li></ul><h5 id="节省内存空间"><a href="#节省内存空间" class="headerlink" title="节省内存空间"></a>节省内存空间</h5><p>Redis 一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。</p><p>这 5 种类型的主要区别就在于，<strong>它们数据结构中的 len 和 alloc 成员变量的数据类型不同</strong>。</p><p>之所以 SDS 设计不同类型的结构体，是为了能<strong>灵活保存不同大小的字符串，从而有效节省内存空间</strong></p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h4 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h4><p>Redis 定义一个 dict 结构体，这个结构体里定义了两个哈希表（ht[2]）。rehash的时候需要使用到两个哈希表。</p><p>rehash步骤分为三步：</p><ul><li>给「哈希表 2」 分配空间，一般会比「哈希表 1」 大一倍（两倍的意思）；</li><li>将「哈希表 1 」的数据迁移到「哈希表 2」 中；</li><li>迁移完成后，「哈希表 1 」的空间会被释放，并把「哈希表 2」 设置为「哈希表 1」，然后在「哈希表 2」 新创建一个空白的哈希表，为下次 rehash 做准备。</li></ul><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MDY0YTdiZGNkNzRjZTlhMmMxMzMzNDAzNGNlODI2OGNfSjNZdVppOHp1TlhaZ1luNmt2M0FsVEk5cm9HS3lWbGZfVG9rZW46TzV1cmJOMTlab2hLbjF4TU5Nd2NMSHZpbkhoXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>如果哈希表1的数据量非常大，那么在迁移至哈希表2的时候，因为会涉及到大量的数据拷贝，此时可能会对Redis造成阻塞，无法服务其他请求。</p><h4 id="渐进式rehash"><a href="#渐进式rehash" class="headerlink" title="渐进式rehash"></a>渐进式rehash</h4><p>为了避免 rehash 在数据迁移过程中，因拷贝数据的耗时，影响 Redis 性能的情况，所以 Redis 采用了渐进式 rehash，也就是将数据的迁移的工作不再是一次性迁移完成，而是分多次迁移。</p><p>渐进式rehash步骤如下：</p><ul><li>给「哈希表 2」 分配空间；</li><li>在 rehash 进行期间，每次哈希表元素进行<strong>新增、删除、查找或者更新操作时</strong>，Redis 除了会执行对应的操作之外，<strong>还会顺序将「哈希表 1 」中索引位置上的所有 key-value 迁移到「哈希表 2」 上</strong>；</li><li>随着处理客户端发起的哈希表操作请求数量越多，最终在某个时间点会把「哈希表 1 」的所有 key-value 迁移到「哈希表 2」，从而完成 rehash 操作。</li></ul><p><strong>rehash期间，删除，查找，更新操作都会在两个哈希表中操作。新增操作只在哈希表2操作。</strong></p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>redis的持久化分为AOF日志和RDB快照     RDB快照就像照相，记录某一时刻redis数据库中的数据，分为全量快照和增量快照，快照的优点是恢复数据快。 AOF日志是写后日志，先保存数据再记录日志，所以日志命令不会错误。 redis采用混合使用 AOF 日志和内存快照的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。结合两种技术优点    </p><h3 id="AOF日志"><a href="#AOF日志" class="headerlink" title="AOF日志"></a>AOF日志</h3><h4 id="写回策略"><a href="#写回策略" class="headerlink" title="写回策略"></a>写回策略</h4><p>Always，同步写回：每个写命令执行完，立马同步地将日志写回磁盘； Everysec，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘； No，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YTRlZDkzNDYyZGM0NzkyNTRlZDlmODZmMDQ0ODU3MDBfekRVQTUxQzFQRlFkZ0w1ZUJzdHBYMnY0b3diZHJzOGxfVG9rZW46QkFnZGJreElKb3R5MGp4cGI5M2NkVDcwbjVmXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>AOF 文件会越来越大,会造成以下问题：    一是，文件系统本身对文件大小有限制，无法保存过大的文件；    二是，如果文件太大，之后再往里面追加命令记录的话，效率也会变低；    三是，如果发生宕机，AOF 中记录的命令要一个个被重新执行，用于故障恢复，如果日志文件太大，整个恢复过程就会非常缓慢，这就会影响到 Redis 的正常使用。     AOF重写就是解决这个问题，重写机制具有“多变一”功能。也就是说，旧日志文件中的多条命令，在重写后的新日志中变成了一条命令。 </p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=OTQ4NmI1MmVmNGIxN2E5MDc5NjU3NjRjNmUyZTBmZDZfUlVzRElUUnN3dXB6dGJwbnNOZDlUbGxtN0Q2aHBVNTZfVG9rZW46WEVVZGJjMFBrb1hSN254dDlscmM1V3JTbnJkXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>当我们对一个列表先后做了 6 次修改操作后，列表的最后状态是[“D”, “C”, “N”]， 此时，只用 LPUSH u:list “N”, “C”, “D”这一条命令就能实现该数据的恢复，这就节省了五条命令的空间。对于被修改过成百上千次的键值对来说，重写能节省的空间当然就更大了。</p><h4 id="AOF重写过程"><a href="#AOF重写过程" class="headerlink" title="AOF重写过程"></a>AOF重写过程</h4><p>重写的过程总结为“一个拷贝，两处日志”。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NzAwOTc2ODQ4NTBhZDM1MmM1MmVlNDc3OTUzYmRkY2ZfNW1mc3hCOXZuN210UXhmUnVYbjZEWGt1OTVHNWcxekFfVG9rZW46Q3kxQmJwTzZXbzZYcFB4dWROYWNoeEg3bkplXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>“一个拷贝”就是指，每次执行重写时，主线程 fork 出后台的 bgrewriteaof 子进程。此时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。 两处日志：因为主线程未阻塞，仍然可以处理新来的操作。两处日志都记录最新操作。等到拷贝数据的所有操作记录重写完成后，重写日志记录的这些最新操作也会写入新的 AOF 文件，以保证数据库最新状态的记录。此时，我们就可以用新的 AOF 文件替代旧文件了。  </p><h3 id="RDB快照"><a href="#RDB快照" class="headerlink" title="RDB快照"></a>RDB快照</h3><p>快照是内存中的数据在某一个时刻的状态记录。AOF日志恢复数据需要逐一执行操作日志，恢复速度慢，而RDB快照在恢复数据时只需要读入内存即可恢复数据，恢复数据速度快。</p><h4 id="快照执行过程"><a href="#快照执行过程" class="headerlink" title="快照执行过程"></a>快照执行过程</h4><p>Redis采用写时复制技术，避免在执行快照系统不能执行写操作。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=OTM0ZDM2YTlmZDg5YjYzOTQ0YzM5OTRjNmE2NGI0NGRfZDNXaVR6dzE4MXJvQlBkS3Z5dXdlSHJtS1lyQTBSS2ZfVG9rZW46U2k4cGJRdjc1b1JDc2V4aUNUWmNtelNUblBlXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享(不是复制)主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。     此时，如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据(旧的)就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本 数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</p><h4 id="增量快照"><a href="#增量快照" class="headerlink" title="增量快照"></a>增量快照</h4><p>因为增量快照需要记录全量快照后改变数据，这样需要存储大量的键值对，这样会消耗大量内存，有些得不偿失。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>当大量缓存数据在同一时间过期（失效）或者 Redis 故障宕机时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力骤增，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃，这就是缓存雪崩的问题。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ODA1NDZjYjg5NmRkODFkYmQ5M2ZjNDA2NGNmMzdlZjJfWGVpclVVdDdUT2EzZmJ3UWlJZURYbFdWNHozU1E5OVlfVG9rZW46SnMzc2JRMTZ2bzl5UjN4MGlQcmMzbkYzbkJmXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><h4 id="大量数据同时过期"><a href="#大量数据同时过期" class="headerlink" title="大量数据同时过期"></a>大量数据同时过期</h4><p>\1. 均匀设置过期时间 目的是为了不要让大量数据同时过期。     2. 互斥锁 目的是减少访问数据库的请求。     当业务线程在处理用户请求时，如果发现访问的数据不在 Redis 里，就加个互斥锁，保证同一时间内只有一个请求来构建缓存（从数据库读取数据，再将数据更新到 Redis 里），当缓存构建完成后，再释放锁。未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。这样后面请求继续访问这个数据时就不会访问数据库了。 实现互斥锁的时候，最好设置超时时间，不然第一个请求拿到了锁，然后这个请求发生了某种意外而一直阻塞，一直不释放锁，这时其他请求也一直拿不到锁，整个系统就会出现无响应的现象。 3. 后台更新缓存 redis数据不设置过期时间，这样就不会造成缓存雪崩。更新缓存的工作交给后端线程定时更新。虽然数据没有过期时间但在内存不足时数据会被淘汰，所以当业务线程发现数据不存在时，使用MQ发送消息通知后台进程更新数据。</p><h4 id="Redis-故障宕机"><a href="#Redis-故障宕机" class="headerlink" title="Redis 故障宕机"></a>Redis 故障宕机</h4><p>\1. 服务熔断或请求限流机制（事情发生后的措施） 服务熔断是暂停业务对redis的访问，避免大量请求访问数据库导致缓存雪崩等redis恢复后取消服务熔断。但这样会导致业务功能在熔断期间完全不可用。 请求限流是只允许少量请求访问redis，这样只会有少量请求访问数据库，不会造成缓存雪崩，同时减少了对业务的影响。         2. 构建 Redis 缓存高可靠集群，减少Redis宕机    </p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>如果缓存中的某个热点数据过期了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮，这就是缓存击穿的问题。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGMyMGZjNTRhMDRkN2QyM2ZlNDQ3ZDQ5NzQ0MzMwOGZfYzF6SGpZdEdaMUFoNUlUSjRHUlZ5Mnp4U2JyVzhPWkJfVG9rZW46Q3ZrN2JtZWRPb29QWU14SkhhbWMzRnhlblpkXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>1、互斥锁方案，保证同一时间只有一个业务线程更新缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。这样后面请求继续访问这个数据时就不会访问数据库了。 2、不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间；</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>当用户访问的数据，既不在缓存中，也不在数据库中，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是缓存穿透的问题。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MTYxODc1YTE2ZTAzY2E1NDk0MDA2ZjI5MjdiYTA3MjlfU01wUGNDbW5RV3hSVE81MGlTejAwTDljNnpiR2FFWnBfVG9rZW46SDQxZGJmblFGb1I3NVd4blFiN2NoS3ZObkFkXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>应对缓存穿透的方案，常见的方案有三种。 第一种方案，非法请求的限制； 第二种方案，缓存空值或者默认值； 第三种方案，使用布隆过滤器快速判断数据是否存在，避免通过查询数据库来判断数据是否存在； 查询布隆过滤器说数据存在，并不一定证明数据库中存在这个数据，但是查询到数据不存在，数据库中一定就不存在这个数据。    </p><h3 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h3><p>引入redis后，如何保证redis和数据库的数据一致呢？     解决方案：先更新数据库，再删除缓存</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NzRmY2EyOTI1MzliNDhhMjhhYjE4MWM1MjliMjM0OTBfNzlKaWlmOVNBTFRtOXRTYUlVMkJpUFZ2bVFHWEtHN1BfVG9rZW46SExQNmI4cjlvb0psS1V4d2xiUmNBNUtubm1mXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>从上面的理论上分析，先更新数据库，再删除缓存也是会出现数据不一致性的问题，但是在实际中，这个问题出现的概率并不高。 因为缓存的写入通常要远远快于数据库的写入,所以先更新数据库再删除缓存是可以保证数据一致性的。</p><h2 id="内存淘汰策略和过期删除策略"><a href="#内存淘汰策略和过期删除策略" class="headerlink" title="内存淘汰策略和过期删除策略"></a>内存淘汰策略和过期删除策略</h2><h3 id="过期删除策略"><a href="#过期删除策略" class="headerlink" title="过期删除策略"></a>过期删除策略</h3><h4 id="如何判断key已经过期"><a href="#如何判断key已经过期" class="headerlink" title="如何判断key已经过期"></a>如何判断key已经过期</h4><p>在给key设置过期时间时，Redis会把key存到过期字典中，访问key时查找过期字典即可知道有没有过期。</p><h4 id="过期键判断流程"><a href="#过期键判断流程" class="headerlink" title="过期键判断流程"></a>过期键判断流程</h4><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MWE5NDIwZWQ4MTEzZjc5MGUzYzIxNWNjZmQ1MDA0MzBfTW5IblNveGM4WHBiYkoyNVNsMEJ6ZHI5ZG1iZ3VZaHNfVG9rZW46SXNXZmJXU1o3b1g1bFB4WHpFSGNTT2Nwbk1nXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><h4 id="有哪些过期删除策略"><a href="#有哪些过期删除策略" class="headerlink" title="有哪些过期删除策略"></a>有哪些过期删除策略</h4><p>过期键值删除策略的作用是将已过期的键值对删除。</p><p>定时删除: 在设置key过期时间时，同时创建一个定时事件，由事件处理器自动执行key的删除操作。 优点：可以保证过期的key很快被释放，也就是内存可以尽快被释放，内存友好型。 缺点：删除过期key需要占据一定CPU时间，如果同时删除大量过期key，将耗费相当一部分CPU时间，CPU不友好型。     惰性删除: 不主动删除key，每次访问key都检测key是否过期，如果过期则删除该key。 优点：不主动删除过期key，占据cpu时间较少，CPU友好型 缺点：过期key如果不访问将得不到释放，会一直占据内存空间，内存不友好型     定期删除: 每隔一定时间随机从数据库中取出一定数量的key进行检查，删除过期的key。 优点：通过限制删除操作的频率，减少对CPU的影响，同时可以删除部分过期key减少内存消耗，CPU中等内存中等型 缺点：CPU资源消耗没有惰性删除小，内存清理方面没有定时删除好。     难以确定执行的频率，频率太高等于定时删除，频率太低等于惰性删除。</p><h4 id="Redis采用过期删除策略（惰性删除-定期删除）"><a href="#Redis采用过期删除策略（惰性删除-定期删除）" class="headerlink" title="Redis采用过期删除策略（惰性删除+定期删除）"></a>Redis采用过期删除策略（惰性删除+定期删除）</h4><p>Redis 选择「惰性删除+定期删除」这两种策略配和使用。可以发现CPU资源是比内存空间珍贵的。</p><h3 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内存淘汰策略是当Redis运行内存超过了Redis设置的最大内存之后，则会使用内存淘汰策略删除符合条件的key，保障Redis运行。</span><br></pre></td></tr></table></figure><h4 id="有哪些内存淘汰策略"><a href="#有哪些内存淘汰策略" class="headerlink" title="有哪些内存淘汰策略"></a>有哪些内存淘汰策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、不进行数据淘汰的策略</span><br><span class="line">noeviction（Redis3<span class="number">.0</span>之后，默认的内存淘汰策略） ：它表示当运行内存超过最大设置内存时，不淘汰任何数据，这时如果有新的数据写入，会报错通知禁止写入，不淘汰任何数据，但是如果没用数据写入的话，只是单纯的查询或者删除操作的话，还是可以正常工作。</span><br><span class="line"><span class="number">2</span>、进行数据淘汰的策略</span><br><span class="line">针对「进行数据淘汰」这一类策略，又可以细分为「在设置了过期时间的数据中进行淘汰」和「在所有数据范围内进行淘汰」这两类策略。</span><br><span class="line"></span><br><span class="line">在设置了过期时间的数据中进行淘汰：</span><br><span class="line"><span class="keyword">volatile</span>-random：随机淘汰设置了过期时间的任意键值；</span><br><span class="line"><span class="keyword">volatile</span>-ttl：优先淘汰更早过期的键值。</span><br><span class="line"><span class="keyword">volatile</span>-lru（Redis3<span class="number">.0</span> 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最久未使用的键值；</span><br><span class="line"><span class="keyword">volatile</span>-lfu（Redis <span class="number">4.0</span> 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最少使用的键值；</span><br><span class="line">    </span><br><span class="line">在所有数据范围内进行淘汰：</span><br><span class="line">allkeys-random：随机淘汰任意键值;</span><br><span class="line">allkeys-lru：淘汰整个键值中最久未使用的键值；</span><br><span class="line">allkeys-lfu（Redis <span class="number">4.0</span> 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值。</span><br></pre></td></tr></table></figure><h2 id="Redis为什么这么快"><a href="#Redis为什么这么快" class="headerlink" title="Redis为什么这么快"></a>Redis为什么这么快</h2><p>Redis 基于内存，内存的访问速度是磁盘的上千倍； Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用 Redis 内置了多种优化过后的数据类型&#x2F;结构实现，性能非常高。</p><h2 id="为什么要用Redis-为什么要用缓存"><a href="#为什么要用Redis-为什么要用缓存" class="headerlink" title="为什么要用Redis&#x2F;为什么要用缓存"></a>为什么要用Redis&#x2F;为什么要用缓存</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis是内存数据库，查询性能比MySQL高很多。如果用户请求的数据是高频数据并且不会经常改变，就可以把数据存入到缓存中，提高系统性能。</span><br></pre></td></tr></table></figure><h3 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis的QPS是远远大于MySQL的，所以我们可以将部分数据从MySQL转移到缓存中，提高系统整体的并发。</span><br></pre></td></tr></table></figure><h2 id="Redis应用"><a href="#Redis应用" class="headerlink" title="Redis应用"></a>Redis应用</h2><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们都是基于Redissio实现分布式锁</span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般是通过Redis+Lua脚本的方式实现限流</span><br></pre></td></tr></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis自带的List数据结构可以作为一个简单的队列使用。Redis5<span class="number">.0</span>增加了Stream类型的数据结构更加适合用来做消息队列。它比较类似于kafka，有主题和消费组的概念，支持消息持久化以及ACK机制。</span><br></pre></td></tr></table></figure><h3 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redisson内置了延时队列（基于Sorted Set实现的）</span><br></pre></td></tr></table></figure><h3 id="分布式Session（不理解）"><a href="#分布式Session（不理解）" class="headerlink" title="分布式Session（不理解）"></a>分布式Session（不理解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用String或者hash数据类型保存Session数据，所有的服务器都可以访问。</span><br><span class="line">为什么所有服务器都可以访问呢，我的Session保存在这台服务器的Redis中，其他服务器能访问得到吗</span><br></pre></td></tr></table></figure><h3 id="统计活跃用户"><a href="#统计活跃用户" class="headerlink" title="统计活跃用户"></a>统计活跃用户</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过Bitmap统计活跃用户。</span><br></pre></td></tr></table></figure><h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redis 中有一个叫做 Sorted Set 的数据类型经常被用在各种排行榜的场景。</span><br><span class="line">相关的一些 Redis 命令: ZRANGE (从小到大排序)、 ZREVRANGE （从大到小排序）、ZREVRANK (指定元素排名)。</span><br></pre></td></tr></table></figure><h2 id="Redis做消息队列"><a href="#Redis做消息队列" class="headerlink" title="Redis做消息队列"></a>Redis做消息队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以是可以，但不建议使用 Redis 来做消息队列。和专业的消息队列相比，还是有很多欠缺的地方。</span><br><span class="line"><span class="number">1</span>、使用List做消息队列，没有消息确认等机制，需要自己实现，消息丢失（客户端断开连接和Redis宕机都会导致消息丢失）、消息堆积（发布者发布的消息的时候不会管消费者具体能力如何）等问题没有一个比较好的解决方法。优点是实现简单。</span><br><span class="line"><span class="number">2</span>、使用Stream做消息队列，使用起来麻烦，并且虽然有消息确认机制，但Redis发生故障恢复后不能保证消息至少被消费一次。</span><br></pre></td></tr></table></figure><h3 id="List实现"><a href="#List实现" class="headerlink" title="List实现"></a>List实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">通过 RPUSH/LPOP 或者 LPUSH/RPOP即可实现简易版消息队列：</span><br><span class="line"># 生产者生产消息</span><br><span class="line">RPUSH myList msg1 <span class="title function_">msg2</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br><span class="line">RPUSH myList <span class="title function_">msg3</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"># 消费者消费消息</span><br><span class="line">LPOP myList</span><br><span class="line"><span class="string">&quot;msg1&quot;</span></span><br><span class="line"></span><br><span class="line">不过，通过 RPUSH/LPOP 或者 LPUSH/RPOP这样的方式存在性能问题，我们需要不断轮询去调用 RPOP 或 LPOP 来消费消息。当List 为空时，大部分的轮询的请求都是无效请求，这种方式大量浪费了系统资源。</span><br><span class="line">因此，Redis 还提供了 BLPOP、BRPOP 这种阻塞式读取的命令（带 B-Bloking 的都是阻塞式），并且还支持一个超时参数。如果List 为空，Redis 服务端不会立刻返回结果，它会等待 List 中有新数据后在返回或者是等待最多一个超时时间后返回空。如果将超时时间设置为 <span class="number">0</span> 时，即可无限等待，直到弹出消息</span><br><span class="line"></span><br><span class="line"># 超时时间为 10s</span><br><span class="line"># 如果有数据立刻返回，否则最多等待<span class="number">10</span>秒</span><br><span class="line">BRPOP myList <span class="number">10</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line">List 实现消息队列功能太简单，像消息确认机制等功能还需要我们自己实现，最要命的是没有广播机制，消息也只能被消费一次。</span><br><span class="line">Redis <span class="number">2.0</span> 引入了发布订阅 (pub/sub) 功能，解决了 List 实现消息队列没有广播机制的问题。</span><br></pre></td></tr></table></figure><h2 id="Redis线程模型"><a href="#Redis线程模型" class="headerlink" title="Redis线程模型"></a>Redis线程模型</h2><h3 id="Redis单线程模型"><a href="#Redis单线程模型" class="headerlink" title="Redis单线程模型"></a>Redis单线程模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单线程+IO多路复用</span><br><span class="line">Redis 通过 IO 多路复用程序 来监听来自客户端的大量连接</span><br><span class="line">I/O 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">感觉这里说的有点模糊</span><br></pre></td></tr></table></figure><h3 id="Redis6-0之前为什么不使用多线程"><a href="#Redis6-0之前为什么不使用多线程" class="headerlink" title="Redis6.0之前为什么不使用多线程"></a>Redis6.0之前为什么不使用多线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">那 Redis6<span class="number">.0</span> 之前为什么不使用多线程？</span><br><span class="line">单线程编程容易并且更容易维护；</span><br><span class="line">Redis 的性能瓶颈不在 CPU ，主要在内存和网络；</span><br><span class="line">多线程就会存在死锁、线程上下文切换等问题，甚至会影响性能。</span><br></pre></td></tr></table></figure><h2 id="Redis性能优化"><a href="#Redis性能优化" class="headerlink" title="Redis性能优化"></a>Redis性能优化</h2><h3 id="大量-key-集中过期问题"><a href="#大量-key-集中过期问题" class="headerlink" title="大量 key 集中过期问题"></a>大量 key 集中过期问题</h3><p>1、均匀设置过期时间</p><p>2、开启 lazy-free（惰性删除&#x2F;延迟释放）</p><h3 id="Redis-bigkey（大-Key）"><a href="#Redis-bigkey（大-Key）" class="headerlink" title="Redis bigkey（大 Key）"></a>Redis bigkey（大 Key）</h3><p>1、分割大key：将一个 bigkey 分割为多个小 key。例如，将一个含有上万字段数量的 Hash 按照一定策略（比如二次哈希）拆分为多个 Hash。</p><p>2、手动清理：Redis 4.0+ 可以使用 <code>UNLINK</code> 命令来异步删除一个或多个指定的 key。Redis 4.0 以下可以考虑使用 <code>SCAN</code> 命令结合 <code>DEL</code> 命令来分批次删除。</p><p>3、开启 lazy-free（惰性删除&#x2F;延迟释放）：lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程</p><h3 id="Redis-hotkey（热-Key）"><a href="#Redis-hotkey（热-Key）" class="headerlink" title="Redis hotkey（热 Key）"></a>Redis hotkey（热 Key）</h3><p>1、使用 Redis cluster：将热点数据分散存储在多个 Redis 节点上。</p><p>2、二级缓存：hotkey 采用二级缓存的方式进行处理，将 hotkey 存放一份到 JVM 本地内存中</p><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><h2 id="3种缓存读写策略"><a href="#3种缓存读写策略" class="headerlink" title="3种缓存读写策略"></a>3种缓存读写策略</h2><h3 id="旁路缓存模式"><a href="#旁路缓存模式" class="headerlink" title="旁路缓存模式"></a>旁路缓存模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">写：</span><br><span class="line">先更新 db</span><br><span class="line">然后直接删除 cache </span><br><span class="line"></span><br><span class="line">读 :</span><br><span class="line">从 cache 中读取数据，读取到就直接返回</span><br><span class="line">cache 中读取不到的话，就从 db 中读取数据返回</span><br><span class="line">再把数据放到 cache 中。</span><br></pre></td></tr></table></figure><h4 id="在写数据过程中可以先删除缓存再更新数据库吗"><a href="#在写数据过程中可以先删除缓存再更新数据库吗" class="headerlink" title="在写数据过程中可以先删除缓存再更新数据库吗"></a>在写数据过程中可以先删除缓存再更新数据库吗</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不行,可能会造成 数据库（db）和缓存（Cache）数据不一致的问题。</span><br><span class="line">A删缓存，B删缓存，B更新数据库，A更新数据库</span><br><span class="line">最后发现B操作丢失</span><br></pre></td></tr></table></figure><h4 id="先更新数据库，后删除缓存就没有问题了么"><a href="#先更新数据库，后删除缓存就没有问题了么" class="headerlink" title="先更新数据库，后删除缓存就没有问题了么"></a>先更新数据库，后删除缓存就没有问题了么</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">理论上来说还是可能会出现数据不一致性的问题，不过概率非常小，因为缓存的写入速度是比数据库的写入速度快很多</span><br></pre></td></tr></table></figure><h4 id="旁路缓存缺陷"><a href="#旁路缓存缺陷" class="headerlink" title="旁路缓存缺陷"></a>旁路缓存缺陷</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">缺陷 <span class="number">1</span>：首次请求数据一定不在 cache 的问题</span><br><span class="line">解决办法：可以将热点数据可以提前放入 cache 中。</span><br><span class="line">缺陷 <span class="number">2</span>：写操作比较频繁的话导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。</span><br><span class="line">数据库和缓存数据强一致场景：更新 db 的时候同样更新 cache，不过我们需要加一个锁/分布式锁来保证更新 cache 的时候不存在线程安全问题。</span><br><span class="line"></span><br><span class="line">可以短暂地允许数据库和缓存数据不一致的场景：更新 db 的时候同样更新 cache，但是给缓存加一个比较短的过期时间，这样的话就可以保证即使数据不一致的话影响也比较小。</span><br></pre></td></tr></table></figure><h3 id="读写穿透"><a href="#读写穿透" class="headerlink" title="读写穿透"></a>读写穿透</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">写：</span><br><span class="line">先查 cache，cache 中不存在，直接更新 db。</span><br><span class="line">cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（同步更新 cache 和 db）。</span><br><span class="line"></span><br><span class="line">读：</span><br><span class="line">从 cache 中读取数据，读取到就直接返回 。</span><br><span class="line">读取不到的话，先从 db 加载，写入到 cache 后返回响应。</span><br></pre></td></tr></table></figure><h3 id="异步缓存写入"><a href="#异步缓存写入" class="headerlink" title="异步缓存写入"></a>异步缓存写入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write Behind则是只更新缓存，不直接更新db，而是改为异步批量的方式来更新db。</span><br></pre></td></tr></table></figure><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h2 id="Redis-cluster"><a href="#Redis-cluster" class="headerlink" title="Redis cluster"></a>Redis cluster</h2><h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>同步就是将从节点的数据库状态更新成主节点当前的数据库状态。具体执行的方式是：从节点向主节点发送<strong>psync</strong>命令（Redis2.8以前是sync命令），开始同步。 数据同步阶段是主从复制最核心的阶段，根据主从节点当前状态的不同，可以分为<strong>全量复制</strong>和<strong>部分复制</strong>。</p><h4 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h4><p>全量复制：用于初次复制或其他无法进行部分复制的情况，将主节点中的所有数据都发送给从节点，是一个非常重型的操作。</p><p>Redis通过psync命令进行全量复制的过程如下：</p><p>（1）从节点判断无法进行部分复制，向主节点发送全量复制的请求；或从节点发送部分复制的请求，但主节点判断无法进行部分复制。</p><p>（2）主节点收到全量复制的命令后，执行bgsave，在后台生成RDB文件，并使用一个缓冲区（称为复制缓冲区）记录从现在开始执行的所有写命令</p><p>（3）主节点的bgsave执行完成后，将RDB文件发送给从节点；从节点首先清除自己的旧数据，然后载入接收的RDB文件，将数据库状态更新至主节点执行bgsave时的数据库状态</p><p>（4）主节点将前述复制缓冲区中的所有写命令发送给从节点，从节点执行这些写命令，将数据库状态更新至主节点的最新状态</p><p>（5）如果从节点开启了AOF，则会触发bgrewriteaof的执行，从而保证AOF文件更新至主节点的最新状态</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NThhMTg0NTBhNjU0MTk2MmI5NmY0MTRiMTIyOTZiOWNfUXBUWWlKVUxXRWphZE5KaUFScEI5MTRJYWFKMU95V1NfVG9rZW46STl1dGJTSU1sb3RTVFd4UE93VGNSZTZObmZoXzE3Mjg2NTUwMDI6MTcyODY1ODYwMl9WNA" alt="img"></p><p>通过全量复制的过程可以看出，全量复制是非常重型的操作：</p><p>（1）主节点通过bgsave命令fork子进程进行RDB持久化，该过程是非常消耗CPU、内存(页表复制)、硬盘IO的；关于bgsave的性能问题</p><p>（2）主节点通过网络将RDB文件发送给从节点，对主从节点的带宽都会带来很大的消耗</p><p>（3）从节点清空老数据、载入新RDB文件的过程是阻塞的，无法响应客户端的命令；如果从节点执行bgrewriteaof，也会带来额外的消耗</p><h4 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h4><p>部分复制：用于网络中断等情况后的复制，只将中断期间主节点执行的写命令发送给从节点，与全量复制相比更加高效。需要注意的是，如果网络中断时间过长，导致主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制。</p><p><a href="https://zhuanlan.zhihu.com/p/151740247">Redis主从复制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据库" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://example.com/2023/12/15/JVM/"/>
    <id>http://example.com/2023/12/15/JVM/</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2024-10-11T14:09:07.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h1><h2 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h2><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NzY0YjAxMWJkYjAyMTgyYTk1OGMxNzBiMTdjOWQ1YmVfa1VKeklhUGQ2bkVpRDI1eWxyU2szTnk2T2g4eE1paGhfVG9rZW46UHA4dWIwRVlUb0xIaVN4VjBIRmNxelhEbkZnXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><h2 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h2><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YTk3MGYyMTVlNTI2YTJjNDUzYWVjNGNmODcwZmIxZWRfUG9ZdW5XZVpBNHRmaUV4RjdNZTltRkNHSnpCNU5DSHhfVG9rZW46QW1TeGIyZWkyb2ZFb1J4MEdhZ2NiUnBKbjBnXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>记录当前执行的指令</p><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>记录执行的Java方法，方法调用的数据需要通过栈进行传递，每一次方法调用都会有一个对应的栈帧被压入栈中，每一个方法调用结束后，都会有一个栈帧被弹出。</p><p>包含：局部变量表，操作数栈，动态链接，方法返回地址。</p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>记录Native方法，本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>存放对象实例，几乎所有的<strong>对象实例以及数组</strong>都在这里分配内存。对象的成员变量等属于对象实例的都在堆上</p><p>堆分为新生代和老年代，永久代（JDK1.8后是元空间）</p><p>永久代物理上属于堆，但逻辑上划分是属于方法区。</p><p>JDK1.8后方法区实现是元空间，直接使用本地内存。</p><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ODY5NTk5MzA3NTZkNDczYmEwMTk1ZWQ5NTcwOTlkMDJfV2ptczdyaGR6bzF6UmxNcG9BdWhuY3BtWHI5RG4zbXJfVG9rZW46RzdNYWJod0wzb0NNaUd4N2pMQWNpZkJvbldoXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>存储<strong>类信息，常量，静态变量，字段信息，方法信息。</strong></p><p>有static修饰的成员变量（静态变量）</p><p>有static修饰的又有final修饰的成员变量（静态常量）都在方法区分配。</p><p>JDK1.8前方法区实现是永久代，JDK1.8实现是元空间，并且元空间直接使用本地内存</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>成员常量和局部常量也是在方法区分配吗（常量是被final修饰的）</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>在方法区中</p><h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>JDK1.7前在永久代中，后面在堆中</p><h3 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h3><h3 id="JDK1-8改变"><a href="#JDK1-8改变" class="headerlink" title="JDK1.8改变"></a>JDK1.8改变</h3><p>把方法区实现从永久代改为元空间，并且元空间直接使用本地内存</p><h1 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h1><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=NjM2ZmE4N2RjMDNkMzM2Y2VkYzFmYmU5OTU2MTQxMzBfc0xaeERPNWtlTkV1T080ZEF2c1RsYWhsMTV6dGlnczhfVG9rZW46TlRPc2I3YUZqb1M0eVR4QVNpOGNjUElMbnZiXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><ol><li>首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程</li><li>分配内存。JVM会在堆中为对象分配内存空间（无JIT优化情况下）。在HotSpot中，对象的内存分配有两种方式，分别是指针碰撞和空闲列表法。<ol><li>指针碰撞：当堆中的内存是连续的，JVM使用一个指针来标记当前可用的内存位置，然后将指针向前移动分配对象所需的内存大小。</li><li>空闲列表：当堆中的内存是离散的，JVM会维护一个空闲列表，记录可用的内存块。在分配对象时，JVM会遍历空闲列表，找到足够大小的内存块进行分配。 （分配内存解决并发有两种手段，一个是CAS+失败重试，一个是Thread Local Allocation  Buffer（TLAB）)</li></ol></li><li>内存分配完成后，虚拟机需要将分配到的内存空间都<strong>初始化为零值</strong>，这一步确保了对象的字段在创建时都有默认值。如int被初始化为0，引用类型被初始化为null</li><li>设置对象头。 该实例所对应的类、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄，轻量级锁等等信息</li><li>调用该类的构造方法，初始化对象。如按照程序员意愿进行赋值</li><li>返回对象引用，当对象完成创建之后，返回一个该对象的引用，后续Java程序就可以使用这个引用来操作对象了。</li></ol><h1 id="JVM垃圾回收"><a href="#JVM垃圾回收" class="headerlink" title="JVM垃圾回收"></a>JVM垃圾回收</h1><h2 id="内存分配和回收原则"><a href="#内存分配和回收原则" class="headerlink" title="内存分配和回收原则"></a>内存分配和回收原则</h2><h3 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h3><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ODMxMDY5ZjVlNjc2ZWNkMDVjMDI1OGFiY2Y4Nzc3NDVfdEhBZGZqcjFlSFYwU3NEdkx3cENLUkI2Y0VGNGdva0xfVG9rZW46QnVmcWJxbzNIbzdncWt4bTdGd2N4dmJ3bjREXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><p>大多数情况下，对象在新生代中 Eden 区分配。<strong>当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</strong></p><h3 id="大对象直接进入老年区"><a href="#大对象直接进入老年区" class="headerlink" title="大对象直接进入老年区"></a>大对象直接进入老年区</h3><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p>大对象直接进入老年代的行为是由虚拟机动态决定的。</p><h3 id="长期存活对象进入老年区"><a href="#长期存活对象进入老年区" class="headerlink" title="长期存活对象进入老年区"></a>长期存活对象进入老年区</h3><p>大部分情况，对象都会首先在 Eden 区域分配。如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间（s0 或者 s1）中，并将对象年龄设为 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)。</p><p>对象在 Survivor 中每熬过一次 MinorGC,年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。</p><h3 id="主要进行GC区域"><a href="#主要进行GC区域" class="headerlink" title="主要进行GC区域"></a>主要进行GC区域</h3><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC &#x2F; Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC &#x2F; Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>空间分配担保就是为了<strong>确保在 Minor GC 之前老年代本身还有容纳新生代所有对象的剩余空间</strong>。</p><p>如果YoungCC时有大量对象存活下来，而survivor区放不下了，这时必须转移到老年代中，但这时发现老年代也放不下这些对象了，那怎么处理呢？其实JVM有一个老年代空间分配担保机制来保证对象能够进入老年代。</p><p><strong>在执行每次YoungGC之前</strong>，JVM会先检查老年代最大可用连续空间是否大于新生代所有对象的总大小。因为在极端情况下，可能新生代YoungGC后，所有对象都存活下来了，而survivor区又放不下，那可能所有对象都要进入老年代了。</p><p>这个时候如果老年代的可用空间是大于新生代所有对象的总大小的，那就可以放心进行YoungGC。但如果老年代的内存大小是小于新生代对象总大小的，那就可能老年代空间不够放入新生代所有存活对象，这个时候JVM就会先检查<code>-XX：HandlePromotionFailure</code>参数是否允许担保失败。</p><p>如果允许，就会判断老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次YoungGC，尽管这次YoungGC是有风险的。但是如果小于，或者<code>-XX：HandlePromotionFailure</code>参数不允许担保失败，这时就会进行一次Full GC。</p><p>在允许担保失败并尝试进行YoungGC后，可能会出现三种情况：</p><p>（1）YoungGC后，存活对象小于survivor大小，此时存活对象进入survivor区中。</p><p>（2）YoungGC后，存活对象大于survivor大小，但是小于老年代可用空间大小，此时直接进入老年代。</p><p>（3）YoungGC后，存活对象大于survivor大小，也大于老年代可用空间大小，老年代也放不下这些对象了，此时就会发生“Handle Promotion Failure”，就是触发了Full GC。如果Full GC后，老年代还是没有足够的空间，此时就会发生OOM内存溢出了。</p><p>画个流程图好点</p><h3 id="一次完整的GC流程"><a href="#一次完整的GC流程" class="headerlink" title="一次完整的GC流程"></a>一次完整的GC流程</h3><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MWY0NzUxZTZiNTQzMDk1MzRhNDFhZDVhYTE1YThmZjlfU3FrZVdTMjFHQjJpN055d3lFajBCaU1jdUZHRlIzUGtfVG9rZW46Wk9reWJ6MEwybzN5eEZ4WFFkdWM4WGdObjRnXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><p>一般来说，GC的触发是在对象分配过程中，当一个对象在创建时，他会根据他的大小决定是进入年轻代或者老年代。如果他的大小超过<code>-XX:PretenureSizeThreshold</code>就会被认为是大对象，直接进入老年代，否则就会在年轻代进行创建。（PretenureSizeThreshold默认是0，也就是说，默认情况下对象不会提前进入老年代，而是直接在新生代分配。然后就GC次数和基于动态年龄判断来进入老年代。） 在年轻代创建对象，会发生在Eden区，但是这个时候有可能会因为Eden区内存不够，这时候就会尝试触发一次YoungGC。 年轻代采用的是标记复制算法，主要分为，标记、复制、清除三个步骤，会从GC Root开始进行存活对象的标记，然后把Eden区和Survivor区复制到另外一个Survivor区。然后再把Eden和From Survivor区的对象清理掉。 这个过程，可能会发生两件事情，第一个就是Survivor有可能存不下这些存活的对象，这时候就会进行空间分配担保。如果担保成功了，那么就没什么事儿，正常进行Young GC就行了。但是如果担保失败了，说明老年代可能也不够了，这时候就会触发一次FullGC了。 还会发生第二件事情就是，在这个过程中，会进行对象的年龄判断，如果他经过一定次数的GC之后，还没有被回收，那么这个对象就会被放到老年代当中去。 而老年代如果不够了，或者担保失败了，那么就会触发老年代的GC，一般来说，现在用的比较多的老年代的垃圾收集器是CMS或者G1，他们采用的都是三色标记法。 也就是分为四个阶段：初始标记、并发标记、重新标记、及并发清理。 老年代在做FullGC之后，如果空间还是不够，那就要触发OOM了。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="1-标记-清除"><a href="#1-标记-清除" class="headerlink" title="1. 标记 - 清除"></a>1. 标记 - 清除</h3><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDkwYzk0ODM2NzY4YjlhNTQ0NTI3NGYyNWFjMjgxZjFfVVZDeDBocmh5RXlDV09BMFoyUlF0NGlCSnU1cjl2UkJfVG9rZW46T0c0VmJvTWFib0ZickN4bUN6M2NGelpMbjdlXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><p>首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><p>不足：</p><ul><li>标记和清除过程效率都不高；</li><li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><h3 id="2-标记-整理"><a href="#2-标记-整理" class="headerlink" title="2. 标记 - 整理"></a>2. 标记 - 整理</h3><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=MGIwMzMxZDNhMzY5MTc1MGEyNGU2ZmE3YTcwZjhmZWJfbk43Y3YyRUlOM1pjcE43a1AzOEJWSGxUaHI0bWdZRHVfVG9rZW46Rmg2cmJmbVA0b0hMZXl4MER4WWM2eGlhbk1iXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p>优点:</p><ul><li>不会产生内存碎片</li></ul><p>不足:</p><ul><li>需要移动大量对象，处理效率比较低。</li></ul><h3 id="3-复制"><a href="#3-复制" class="headerlink" title="3. 复制"></a>3. 复制</h3><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YWJiYjBjY2FjYmEzMGQ5ZDIxZmYyOGI5NzQzYjFiN2NfQ2d6TFZHTGhoSVVkcDVlVGpIVVg2VEFOcUFoVVJneDdfVG9rZW46S0F2U2J5MW9TbzY0cUp4dWtpZ2NBY1QxbmFDXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><p>主要不足是只使用了内存的一半。</p><h3 id="4-分代收集"><a href="#4-分代收集" class="headerlink" title="4. 分代收集"></a>4. 分代收集</h3><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p><p>一般将堆分为新生代和老年代。</p><ul><li>新生代使用：复制算法</li><li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li></ul><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><ol><li>串行垃圾回收器（Serial Garbage Collector） 如：Serial GC， Serial Old</li></ol><p>Serial是单线程的串行垃圾回收器，主要采用标记-复制算法进行垃圾回收。</p><p>Serial Old是Serial的老年代版本，也是个单线程收集器，适用于老年代，使用的是标记-整理算法。</p><ol><li>并行垃圾回收器（Parallel Garbage Collector） 如：Parallel Scavenge，Parallel Old，ParNew</li></ol><p>ParNew其实就是Serial的多线程版本，在参数、回收算法上，和Serial是完全一样的，所以他也是采用标记-复制算法进行垃圾回收的。</p><p>Parallel Scavenge 也是一个新生代的垃圾回收器，和ParNew一样，他也是多线程并行执行的，同样采用的也是标记-复制算法。与ParNew最大的不同是，Parallel Scavenge 关注的是垃圾回收的吞吐量（吞吐量&#x3D;代码运行时间&#x2F;(代码运行时间+垃圾收集时间)，以吞吐量优先。</p><p>Parallel 是 Parallel Scavenge的老年代版本，同样是一个关注吞吐量的并行垃圾收集器，他采用的是标记-整理算法算法进行垃圾回收的。</p><ol><li>并发标记扫描垃圾回收器（CMS Garbage Collector）</li></ol><p>CMS，Concurrent Mark Sweep，同样是老年代的收集器。他也是一个并发执行的垃圾收集器，他和Parallel最大的区别是他更加关注垃圾回收的停顿时间，通过他的名字Concurrent Mark Sweep就可以知道，他采用的是耗时更短的<strong>标记-清除算法</strong>。</p><ol><li>G1垃圾回收器（G1 Garbage Collector，JDK 7中推出，JDK 9中设置为默认）</li></ol><p>G1，Garbage First，是CMS的改进版，解决了CMS内存碎片、更多的内存空间等问题。总之，G1是一个先进的垃圾收集器，它可以提高系统的吞吐量，降低停顿的频率，并且可以有效管理大型堆。在JDK 9之后，G1成为了默认的垃圾回收器，主要是因为他有以下优势：</p><ol><li><strong>并发回收</strong>：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop The World的停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li><li><strong>分代收集</strong>：分代概念在G1中依然得以保留。虽然G1可以不需要其它收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。也就是说G1可以自己管理新生代和老年代了。</li><li><strong>空间整合</strong>：由于G1使用了独立区域（Region）概念，G1从整体来看是基于标记-整理算法实现收集，从局部（两个Region）上来看是基于标记-复制算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片。</li><li><strong>可预测的停顿</strong>：这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li><li><strong>支持热插拔</strong>：G1可以在运行时动态调整堆的大小，以适应不同的内存需求。</li></ol><p>与其它收集器相比，G1变化较大的是它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但新生代和老年代不再是物理隔离的了它们都是一部分Region（不需要连续）的集合。</p><p>同时，为了避免全堆扫描，G1使用了Remembered Set来管理相关的对象引用信息。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆扫描也不会有遗漏了。</p><ol><li>ZGC垃圾回收器（The Z Garbage Collector，JDK 11 推出）</li></ol><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h1><p><img src="https://q1y5mt3xt8m.feishu.cn/space/api/box/stream/download/asynccode/?code=YWFkY2Q3YjM2ZTJlN2ZkZTk0OTJhN2ZhNjFhNWYzYThfc1JCMm9ubzVyYmFYdGxCbE5zYXppUURueUtrckZ0allfVG9rZW46R3lxWmJ6QUFlb0pVZ1F4eERLRGMzYUN1bnplXzE3Mjg2NTU2MDk6MTcyODY1OTIwOV9WNA" alt="img"></p><h1 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h1><p><strong>加载阶段的目的是将类的.class文件加载到JVM中。</strong></p><p>类加载过程的第一步，主要完成下面 3 件事情：</p><ol><li>通过全类名获取定义此类的二进制字节流。</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构。</li><li>在内存中生成一个代表该类的 <code>Class</code> 对象，作为方法区这些数据的访问入口。</li></ol><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>校验类的正确性（文件格式，元数据，字节码，二进制兼容性），保证类的结构符合JVM规范。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>为类变量分配内存并设置类变量的默认初始值，这些变量使用的内存都在方法区中分配。（这里初始化的是类变量，即static字段，实例变量会在对象实例化时随对象一起分配在Java堆中。初始化零值）</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析阶段是虚拟机将常量池内的类的符号引用转为直接引用*(类或接口、字段、类方法、接口方法、方法类型、方法句柄和访问控制修饰符7类符号引用 )*</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p><strong>初始化</strong>的阶段是类加载的最后一步，这个阶段主要是执行 java 代码，进行相关初始化的动作;这时候就执行一些<strong>静态代码块</strong>，为<strong>静态变量</strong>赋值，这里的赋值才是代码里面的赋值，准备阶段只是设置初始值占个坑。</p><h1 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="JVM" scheme="http://example.com/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://example.com/tags/JVM/"/>
    
  </entry>
  
</feed>
